-- | Generated by __protobuf__ from file `google/protobuf/test_messages_proto3.proto`
module ProtobufTestMessages.Proto3.TestMessagesProto3
( TestAllTypesProto3(..), TestAllTypesProto3Row, TestAllTypesProto3R, parseTestAllTypesProto3, putTestAllTypesProto3, defaultTestAllTypesProto3, mkTestAllTypesProto3, mergeTestAllTypesProto3, TestAllTypesProto3_Oneof_field(..)
, TestAllTypesProto3_NestedMessage(..), TestAllTypesProto3_NestedMessageRow, TestAllTypesProto3_NestedMessageR, parseTestAllTypesProto3_NestedMessage, putTestAllTypesProto3_NestedMessage, defaultTestAllTypesProto3_NestedMessage, mkTestAllTypesProto3_NestedMessage, mergeTestAllTypesProto3_NestedMessage
, TestAllTypesProto3_MapInt32Int32Entry(..), TestAllTypesProto3_MapInt32Int32EntryRow, TestAllTypesProto3_MapInt32Int32EntryR, parseTestAllTypesProto3_MapInt32Int32Entry, putTestAllTypesProto3_MapInt32Int32Entry, defaultTestAllTypesProto3_MapInt32Int32Entry, mkTestAllTypesProto3_MapInt32Int32Entry, mergeTestAllTypesProto3_MapInt32Int32Entry
, TestAllTypesProto3_MapInt64Int64Entry(..), TestAllTypesProto3_MapInt64Int64EntryRow, TestAllTypesProto3_MapInt64Int64EntryR, parseTestAllTypesProto3_MapInt64Int64Entry, putTestAllTypesProto3_MapInt64Int64Entry, defaultTestAllTypesProto3_MapInt64Int64Entry, mkTestAllTypesProto3_MapInt64Int64Entry, mergeTestAllTypesProto3_MapInt64Int64Entry
, TestAllTypesProto3_MapUint32Uint32Entry(..), TestAllTypesProto3_MapUint32Uint32EntryRow, TestAllTypesProto3_MapUint32Uint32EntryR, parseTestAllTypesProto3_MapUint32Uint32Entry, putTestAllTypesProto3_MapUint32Uint32Entry, defaultTestAllTypesProto3_MapUint32Uint32Entry, mkTestAllTypesProto3_MapUint32Uint32Entry, mergeTestAllTypesProto3_MapUint32Uint32Entry
, TestAllTypesProto3_MapUint64Uint64Entry(..), TestAllTypesProto3_MapUint64Uint64EntryRow, TestAllTypesProto3_MapUint64Uint64EntryR, parseTestAllTypesProto3_MapUint64Uint64Entry, putTestAllTypesProto3_MapUint64Uint64Entry, defaultTestAllTypesProto3_MapUint64Uint64Entry, mkTestAllTypesProto3_MapUint64Uint64Entry, mergeTestAllTypesProto3_MapUint64Uint64Entry
, TestAllTypesProto3_MapSint32Sint32Entry(..), TestAllTypesProto3_MapSint32Sint32EntryRow, TestAllTypesProto3_MapSint32Sint32EntryR, parseTestAllTypesProto3_MapSint32Sint32Entry, putTestAllTypesProto3_MapSint32Sint32Entry, defaultTestAllTypesProto3_MapSint32Sint32Entry, mkTestAllTypesProto3_MapSint32Sint32Entry, mergeTestAllTypesProto3_MapSint32Sint32Entry
, TestAllTypesProto3_MapSint64Sint64Entry(..), TestAllTypesProto3_MapSint64Sint64EntryRow, TestAllTypesProto3_MapSint64Sint64EntryR, parseTestAllTypesProto3_MapSint64Sint64Entry, putTestAllTypesProto3_MapSint64Sint64Entry, defaultTestAllTypesProto3_MapSint64Sint64Entry, mkTestAllTypesProto3_MapSint64Sint64Entry, mergeTestAllTypesProto3_MapSint64Sint64Entry
, TestAllTypesProto3_MapFixed32Fixed32Entry(..), TestAllTypesProto3_MapFixed32Fixed32EntryRow, TestAllTypesProto3_MapFixed32Fixed32EntryR, parseTestAllTypesProto3_MapFixed32Fixed32Entry, putTestAllTypesProto3_MapFixed32Fixed32Entry, defaultTestAllTypesProto3_MapFixed32Fixed32Entry, mkTestAllTypesProto3_MapFixed32Fixed32Entry, mergeTestAllTypesProto3_MapFixed32Fixed32Entry
, TestAllTypesProto3_MapFixed64Fixed64Entry(..), TestAllTypesProto3_MapFixed64Fixed64EntryRow, TestAllTypesProto3_MapFixed64Fixed64EntryR, parseTestAllTypesProto3_MapFixed64Fixed64Entry, putTestAllTypesProto3_MapFixed64Fixed64Entry, defaultTestAllTypesProto3_MapFixed64Fixed64Entry, mkTestAllTypesProto3_MapFixed64Fixed64Entry, mergeTestAllTypesProto3_MapFixed64Fixed64Entry
, TestAllTypesProto3_MapSfixed32Sfixed32Entry(..), TestAllTypesProto3_MapSfixed32Sfixed32EntryRow, TestAllTypesProto3_MapSfixed32Sfixed32EntryR, parseTestAllTypesProto3_MapSfixed32Sfixed32Entry, putTestAllTypesProto3_MapSfixed32Sfixed32Entry, defaultTestAllTypesProto3_MapSfixed32Sfixed32Entry, mkTestAllTypesProto3_MapSfixed32Sfixed32Entry, mergeTestAllTypesProto3_MapSfixed32Sfixed32Entry
, TestAllTypesProto3_MapSfixed64Sfixed64Entry(..), TestAllTypesProto3_MapSfixed64Sfixed64EntryRow, TestAllTypesProto3_MapSfixed64Sfixed64EntryR, parseTestAllTypesProto3_MapSfixed64Sfixed64Entry, putTestAllTypesProto3_MapSfixed64Sfixed64Entry, defaultTestAllTypesProto3_MapSfixed64Sfixed64Entry, mkTestAllTypesProto3_MapSfixed64Sfixed64Entry, mergeTestAllTypesProto3_MapSfixed64Sfixed64Entry
, TestAllTypesProto3_MapInt32FloatEntry(..), TestAllTypesProto3_MapInt32FloatEntryRow, TestAllTypesProto3_MapInt32FloatEntryR, parseTestAllTypesProto3_MapInt32FloatEntry, putTestAllTypesProto3_MapInt32FloatEntry, defaultTestAllTypesProto3_MapInt32FloatEntry, mkTestAllTypesProto3_MapInt32FloatEntry, mergeTestAllTypesProto3_MapInt32FloatEntry
, TestAllTypesProto3_MapInt32DoubleEntry(..), TestAllTypesProto3_MapInt32DoubleEntryRow, TestAllTypesProto3_MapInt32DoubleEntryR, parseTestAllTypesProto3_MapInt32DoubleEntry, putTestAllTypesProto3_MapInt32DoubleEntry, defaultTestAllTypesProto3_MapInt32DoubleEntry, mkTestAllTypesProto3_MapInt32DoubleEntry, mergeTestAllTypesProto3_MapInt32DoubleEntry
, TestAllTypesProto3_MapBoolBoolEntry(..), TestAllTypesProto3_MapBoolBoolEntryRow, TestAllTypesProto3_MapBoolBoolEntryR, parseTestAllTypesProto3_MapBoolBoolEntry, putTestAllTypesProto3_MapBoolBoolEntry, defaultTestAllTypesProto3_MapBoolBoolEntry, mkTestAllTypesProto3_MapBoolBoolEntry, mergeTestAllTypesProto3_MapBoolBoolEntry
, TestAllTypesProto3_MapStringStringEntry(..), TestAllTypesProto3_MapStringStringEntryRow, TestAllTypesProto3_MapStringStringEntryR, parseTestAllTypesProto3_MapStringStringEntry, putTestAllTypesProto3_MapStringStringEntry, defaultTestAllTypesProto3_MapStringStringEntry, mkTestAllTypesProto3_MapStringStringEntry, mergeTestAllTypesProto3_MapStringStringEntry
, TestAllTypesProto3_MapStringBytesEntry(..), TestAllTypesProto3_MapStringBytesEntryRow, TestAllTypesProto3_MapStringBytesEntryR, parseTestAllTypesProto3_MapStringBytesEntry, putTestAllTypesProto3_MapStringBytesEntry, defaultTestAllTypesProto3_MapStringBytesEntry, mkTestAllTypesProto3_MapStringBytesEntry, mergeTestAllTypesProto3_MapStringBytesEntry
, TestAllTypesProto3_MapStringNestedMessageEntry(..), TestAllTypesProto3_MapStringNestedMessageEntryRow, TestAllTypesProto3_MapStringNestedMessageEntryR, parseTestAllTypesProto3_MapStringNestedMessageEntry, putTestAllTypesProto3_MapStringNestedMessageEntry, defaultTestAllTypesProto3_MapStringNestedMessageEntry, mkTestAllTypesProto3_MapStringNestedMessageEntry, mergeTestAllTypesProto3_MapStringNestedMessageEntry
, TestAllTypesProto3_MapStringForeignMessageEntry(..), TestAllTypesProto3_MapStringForeignMessageEntryRow, TestAllTypesProto3_MapStringForeignMessageEntryR, parseTestAllTypesProto3_MapStringForeignMessageEntry, putTestAllTypesProto3_MapStringForeignMessageEntry, defaultTestAllTypesProto3_MapStringForeignMessageEntry, mkTestAllTypesProto3_MapStringForeignMessageEntry, mergeTestAllTypesProto3_MapStringForeignMessageEntry
, TestAllTypesProto3_MapStringNestedEnumEntry(..), TestAllTypesProto3_MapStringNestedEnumEntryRow, TestAllTypesProto3_MapStringNestedEnumEntryR, parseTestAllTypesProto3_MapStringNestedEnumEntry, putTestAllTypesProto3_MapStringNestedEnumEntry, defaultTestAllTypesProto3_MapStringNestedEnumEntry, mkTestAllTypesProto3_MapStringNestedEnumEntry, mergeTestAllTypesProto3_MapStringNestedEnumEntry
, TestAllTypesProto3_MapStringForeignEnumEntry(..), TestAllTypesProto3_MapStringForeignEnumEntryRow, TestAllTypesProto3_MapStringForeignEnumEntryR, parseTestAllTypesProto3_MapStringForeignEnumEntry, putTestAllTypesProto3_MapStringForeignEnumEntry, defaultTestAllTypesProto3_MapStringForeignEnumEntry, mkTestAllTypesProto3_MapStringForeignEnumEntry, mergeTestAllTypesProto3_MapStringForeignEnumEntry
, ForeignMessage(..), ForeignMessageRow, ForeignMessageR, parseForeignMessage, putForeignMessage, defaultForeignMessage, mkForeignMessage, mergeForeignMessage
, NullHypothesisProto3(..), NullHypothesisProto3Row, NullHypothesisProto3R, parseNullHypothesisProto3, putNullHypothesisProto3, defaultNullHypothesisProto3, mkNullHypothesisProto3, mergeNullHypothesisProto3
, EnumOnlyProto3(..), EnumOnlyProto3Row, EnumOnlyProto3R, parseEnumOnlyProto3, putEnumOnlyProto3, defaultEnumOnlyProto3, mkEnumOnlyProto3, mergeEnumOnlyProto3
, ForeignEnum(..)
, TestAllTypesProto3_NestedEnum(..)
, TestAllTypesProto3_AliasedEnum(..)
, EnumOnlyProto3_Bool(..)
)
where
import Protobuf.Internal.Prelude
import Protobuf.Internal.Prelude as Prelude

import Google.Protobuf.Any as Google.Protobuf
import Google.Protobuf.Duration as Google.Protobuf
import Google.Protobuf.FieldMask as Google.Protobuf
import Google.Protobuf.Struct as Google.Protobuf
import Google.Protobuf.Timestamp as Google.Protobuf
import Google.Protobuf.Wrappers as Google.Protobuf



-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3`
-- | 
-- | This proto includes every type of field in both singular and repeated
-- | forms.
-- | 
-- | Also, crucially, all messages and enums in this file are eventually
-- | submessages of this message.  So for example, a fuzz test of TestAllTypes
-- | could trigger bugs that occur in any message type in this file.  We verify
-- | this stays true in a unit test.
newtype TestAllTypesProto3 = TestAllTypesProto3 TestAllTypesProto3R
type TestAllTypesProto3Row =
  ( optional_int32 :: Prelude.Maybe Int
  , optional_int64 :: Prelude.Maybe Prelude.Int64
  , optional_uint32 :: Prelude.Maybe Prelude.UInt
  , optional_uint64 :: Prelude.Maybe Prelude.UInt64
  , optional_sint32 :: Prelude.Maybe Int
  , optional_sint64 :: Prelude.Maybe Prelude.Int64
  , optional_fixed32 :: Prelude.Maybe Prelude.UInt
  , optional_fixed64 :: Prelude.Maybe Prelude.UInt64
  , optional_sfixed32 :: Prelude.Maybe Int
  , optional_sfixed64 :: Prelude.Maybe Prelude.Int64
  , optional_float :: Prelude.Maybe Prelude.Float32
  , optional_double :: Prelude.Maybe Number
  , optional_bool :: Prelude.Maybe Boolean
  , optional_string :: Prelude.Maybe String
  , optional_bytes :: Prelude.Maybe Prelude.Bytes
  , optional_nested_message :: Prelude.Maybe TestAllTypesProto3_NestedMessage
  , optional_foreign_message :: Prelude.Maybe ForeignMessage
  , optional_nested_enum :: Prelude.Maybe TestAllTypesProto3_NestedEnum
  , optional_foreign_enum :: Prelude.Maybe ForeignEnum
  , optional_aliased_enum :: Prelude.Maybe TestAllTypesProto3_AliasedEnum
  , optional_string_piece :: Prelude.Maybe String
  , optional_cord :: Prelude.Maybe String
  , recursive_message :: Prelude.Maybe TestAllTypesProto3
  , repeated_int32 :: Array Int
  , repeated_int64 :: Array Prelude.Int64
  , repeated_uint32 :: Array Prelude.UInt
  , repeated_uint64 :: Array Prelude.UInt64
  , repeated_sint32 :: Array Int
  , repeated_sint64 :: Array Prelude.Int64
  , repeated_fixed32 :: Array Prelude.UInt
  , repeated_fixed64 :: Array Prelude.UInt64
  , repeated_sfixed32 :: Array Int
  , repeated_sfixed64 :: Array Prelude.Int64
  , repeated_float :: Array Prelude.Float32
  , repeated_double :: Array Number
  , repeated_bool :: Array Boolean
  , repeated_string :: Array String
  , repeated_bytes :: Array Prelude.Bytes
  , repeated_nested_message :: Array TestAllTypesProto3_NestedMessage
  , repeated_foreign_message :: Array ForeignMessage
  , repeated_nested_enum :: Array TestAllTypesProto3_NestedEnum
  , repeated_foreign_enum :: Array ForeignEnum
  , repeated_string_piece :: Array String
  , repeated_cord :: Array String
  , packed_int32 :: Array Int
  , packed_int64 :: Array Prelude.Int64
  , packed_uint32 :: Array Prelude.UInt
  , packed_uint64 :: Array Prelude.UInt64
  , packed_sint32 :: Array Int
  , packed_sint64 :: Array Prelude.Int64
  , packed_fixed32 :: Array Prelude.UInt
  , packed_fixed64 :: Array Prelude.UInt64
  , packed_sfixed32 :: Array Int
  , packed_sfixed64 :: Array Prelude.Int64
  , packed_float :: Array Prelude.Float32
  , packed_double :: Array Number
  , packed_bool :: Array Boolean
  , packed_nested_enum :: Array TestAllTypesProto3_NestedEnum
  , unpacked_int32 :: Array Int
  , unpacked_int64 :: Array Prelude.Int64
  , unpacked_uint32 :: Array Prelude.UInt
  , unpacked_uint64 :: Array Prelude.UInt64
  , unpacked_sint32 :: Array Int
  , unpacked_sint64 :: Array Prelude.Int64
  , unpacked_fixed32 :: Array Prelude.UInt
  , unpacked_fixed64 :: Array Prelude.UInt64
  , unpacked_sfixed32 :: Array Int
  , unpacked_sfixed64 :: Array Prelude.Int64
  , unpacked_float :: Array Prelude.Float32
  , unpacked_double :: Array Number
  , unpacked_bool :: Array Boolean
  , unpacked_nested_enum :: Array TestAllTypesProto3_NestedEnum
  , map_int32_int32 :: Array TestAllTypesProto3_MapInt32Int32Entry
  , map_int64_int64 :: Array TestAllTypesProto3_MapInt64Int64Entry
  , map_uint32_uint32 :: Array TestAllTypesProto3_MapUint32Uint32Entry
  , map_uint64_uint64 :: Array TestAllTypesProto3_MapUint64Uint64Entry
  , map_sint32_sint32 :: Array TestAllTypesProto3_MapSint32Sint32Entry
  , map_sint64_sint64 :: Array TestAllTypesProto3_MapSint64Sint64Entry
  , map_fixed32_fixed32 :: Array TestAllTypesProto3_MapFixed32Fixed32Entry
  , map_fixed64_fixed64 :: Array TestAllTypesProto3_MapFixed64Fixed64Entry
  , map_sfixed32_sfixed32 :: Array TestAllTypesProto3_MapSfixed32Sfixed32Entry
  , map_sfixed64_sfixed64 :: Array TestAllTypesProto3_MapSfixed64Sfixed64Entry
  , map_int32_float :: Array TestAllTypesProto3_MapInt32FloatEntry
  , map_int32_double :: Array TestAllTypesProto3_MapInt32DoubleEntry
  , map_bool_bool :: Array TestAllTypesProto3_MapBoolBoolEntry
  , map_string_string :: Array TestAllTypesProto3_MapStringStringEntry
  , map_string_bytes :: Array TestAllTypesProto3_MapStringBytesEntry
  , map_string_nested_message :: Array TestAllTypesProto3_MapStringNestedMessageEntry
  , map_string_foreign_message :: Array TestAllTypesProto3_MapStringForeignMessageEntry
  , map_string_nested_enum :: Array TestAllTypesProto3_MapStringNestedEnumEntry
  , map_string_foreign_enum :: Array TestAllTypesProto3_MapStringForeignEnumEntry
  , optional_bool_wrapper :: Prelude.Maybe Google.Protobuf.BoolValue
  , optional_int32_wrapper :: Prelude.Maybe Google.Protobuf.Int32Value
  , optional_int64_wrapper :: Prelude.Maybe Google.Protobuf.Int64Value
  , optional_uint32_wrapper :: Prelude.Maybe Google.Protobuf.UInt32Value
  , optional_uint64_wrapper :: Prelude.Maybe Google.Protobuf.UInt64Value
  , optional_float_wrapper :: Prelude.Maybe Google.Protobuf.FloatValue
  , optional_double_wrapper :: Prelude.Maybe Google.Protobuf.DoubleValue
  , optional_string_wrapper :: Prelude.Maybe Google.Protobuf.StringValue
  , optional_bytes_wrapper :: Prelude.Maybe Google.Protobuf.BytesValue
  , repeated_bool_wrapper :: Array Google.Protobuf.BoolValue
  , repeated_int32_wrapper :: Array Google.Protobuf.Int32Value
  , repeated_int64_wrapper :: Array Google.Protobuf.Int64Value
  , repeated_uint32_wrapper :: Array Google.Protobuf.UInt32Value
  , repeated_uint64_wrapper :: Array Google.Protobuf.UInt64Value
  , repeated_float_wrapper :: Array Google.Protobuf.FloatValue
  , repeated_double_wrapper :: Array Google.Protobuf.DoubleValue
  , repeated_string_wrapper :: Array Google.Protobuf.StringValue
  , repeated_bytes_wrapper :: Array Google.Protobuf.BytesValue
  , optional_duration :: Prelude.Maybe Google.Protobuf.Duration
  , optional_timestamp :: Prelude.Maybe Google.Protobuf.Timestamp
  , optional_field_mask :: Prelude.Maybe Google.Protobuf.FieldMask
  , optional_struct :: Prelude.Maybe Google.Protobuf.Struct
  , optional_any :: Prelude.Maybe Google.Protobuf.Any
  , optional_value :: Prelude.Maybe Google.Protobuf.Value
  , optional_null_value :: Prelude.Maybe Google.Protobuf.NullValue
  , repeated_duration :: Array Google.Protobuf.Duration
  , repeated_timestamp :: Array Google.Protobuf.Timestamp
  , repeated_fieldmask :: Array Google.Protobuf.FieldMask
  , repeated_struct :: Array Google.Protobuf.Struct
  , repeated_any :: Array Google.Protobuf.Any
  , repeated_value :: Array Google.Protobuf.Value
  , repeated_list_value :: Array Google.Protobuf.ListValue
  , fieldname1 :: Prelude.Maybe Int
  , field_name2 :: Prelude.Maybe Int
  , _field_name3 :: Prelude.Maybe Int
  , field__name4_ :: Prelude.Maybe Int
  , field0name5 :: Prelude.Maybe Int
  , field_0_name6 :: Prelude.Maybe Int
  , fieldName7 :: Prelude.Maybe Int
  , fieldName8 :: Prelude.Maybe Int
  , field_Name9 :: Prelude.Maybe Int
  , field_Name10 :: Prelude.Maybe Int
  , fIELD_NAME11 :: Prelude.Maybe Int
  , fIELD_name12 :: Prelude.Maybe Int
  , __field_name13 :: Prelude.Maybe Int
  , __Field_name14 :: Prelude.Maybe Int
  , field__name15 :: Prelude.Maybe Int
  , field__Name16 :: Prelude.Maybe Int
  , field_name17__ :: Prelude.Maybe Int
  , field_name18__ :: Prelude.Maybe Int
  , oneof_field :: Prelude.Maybe TestAllTypesProto3_Oneof_field
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3R = Record TestAllTypesProto3Row
derive instance genericTestAllTypesProto3 :: Prelude.Generic TestAllTypesProto3 _
derive instance newtypeTestAllTypesProto3 :: Prelude.Newtype TestAllTypesProto3 _
derive instance eqTestAllTypesProto3 :: Prelude.Eq TestAllTypesProto3
instance showTestAllTypesProto3 :: Prelude.Show TestAllTypesProto3 where show x = Prelude.genericShow x

putTestAllTypesProto3 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3 -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3 (TestAllTypesProto3 r) = do
  Prelude.putOptional 1 r.optional_int32 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 2 r.optional_int64 Prelude.isDefault Prelude.encodeInt64Field
  Prelude.putOptional 3 r.optional_uint32 Prelude.isDefault Prelude.encodeUint32Field
  Prelude.putOptional 4 r.optional_uint64 Prelude.isDefault Prelude.encodeUint64Field
  Prelude.putOptional 5 r.optional_sint32 Prelude.isDefault Prelude.encodeSint32Field
  Prelude.putOptional 6 r.optional_sint64 Prelude.isDefault Prelude.encodeSint64Field
  Prelude.putOptional 7 r.optional_fixed32 Prelude.isDefault Prelude.encodeFixed32Field
  Prelude.putOptional 8 r.optional_fixed64 Prelude.isDefault Prelude.encodeFixed64Field
  Prelude.putOptional 9 r.optional_sfixed32 Prelude.isDefault Prelude.encodeSfixed32Field
  Prelude.putOptional 10 r.optional_sfixed64 Prelude.isDefault Prelude.encodeSfixed64Field
  Prelude.putOptional 11 r.optional_float Prelude.isDefault Prelude.encodeFloatField
  Prelude.putOptional 12 r.optional_double Prelude.isDefault Prelude.encodeDoubleField
  Prelude.putOptional 13 r.optional_bool Prelude.isDefault Prelude.encodeBoolField
  Prelude.putOptional 14 r.optional_string Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 15 r.optional_bytes Prelude.isDefault Prelude.encodeBytesField
  Prelude.putOptional 18 r.optional_nested_message (\_ -> false) $ Prelude.putLenDel putTestAllTypesProto3_NestedMessage
  Prelude.putOptional 19 r.optional_foreign_message (\_ -> false) $ Prelude.putLenDel putForeignMessage
  Prelude.putOptional 21 r.optional_nested_enum Prelude.isDefault Prelude.putEnumField
  Prelude.putOptional 22 r.optional_foreign_enum Prelude.isDefault Prelude.putEnumField
  Prelude.putOptional 23 r.optional_aliased_enum Prelude.isDefault Prelude.putEnumField
  Prelude.putOptional 24 r.optional_string_piece Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 25 r.optional_cord Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 27 r.recursive_message (\_ -> false) $ Prelude.putLenDel putTestAllTypesProto3
  Prelude.putPacked 31 r.repeated_int32 Prelude.encodeInt32
  Prelude.putPacked 32 r.repeated_int64 Prelude.encodeInt64
  Prelude.putPacked 33 r.repeated_uint32 Prelude.encodeUint32
  Prelude.putPacked 34 r.repeated_uint64 Prelude.encodeUint64
  Prelude.putPacked 35 r.repeated_sint32 Prelude.encodeSint32
  Prelude.putPacked 36 r.repeated_sint64 Prelude.encodeSint64
  Prelude.putPacked 37 r.repeated_fixed32 Prelude.encodeFixed32
  Prelude.putPacked 38 r.repeated_fixed64 Prelude.encodeFixed64
  Prelude.putPacked 39 r.repeated_sfixed32 Prelude.encodeSfixed32
  Prelude.putPacked 40 r.repeated_sfixed64 Prelude.encodeSfixed64
  Prelude.putPacked 41 r.repeated_float Prelude.encodeFloat
  Prelude.putPacked 42 r.repeated_double Prelude.encodeDouble
  Prelude.putPacked 43 r.repeated_bool Prelude.encodeBool
  Prelude.putRepeated 44 r.repeated_string Prelude.encodeStringField
  Prelude.putRepeated 45 r.repeated_bytes $ Prelude.encodeBytesField
  Prelude.putRepeated 48 r.repeated_nested_message $ Prelude.putLenDel putTestAllTypesProto3_NestedMessage
  Prelude.putRepeated 49 r.repeated_foreign_message $ Prelude.putLenDel putForeignMessage
  Prelude.putPacked 51 r.repeated_nested_enum Prelude.putEnum
  Prelude.putPacked 52 r.repeated_foreign_enum Prelude.putEnum
  Prelude.putRepeated 54 r.repeated_string_piece Prelude.encodeStringField
  Prelude.putRepeated 55 r.repeated_cord Prelude.encodeStringField
  Prelude.putPacked 75 r.packed_int32 Prelude.encodeInt32
  Prelude.putPacked 76 r.packed_int64 Prelude.encodeInt64
  Prelude.putPacked 77 r.packed_uint32 Prelude.encodeUint32
  Prelude.putPacked 78 r.packed_uint64 Prelude.encodeUint64
  Prelude.putPacked 79 r.packed_sint32 Prelude.encodeSint32
  Prelude.putPacked 80 r.packed_sint64 Prelude.encodeSint64
  Prelude.putPacked 81 r.packed_fixed32 Prelude.encodeFixed32
  Prelude.putPacked 82 r.packed_fixed64 Prelude.encodeFixed64
  Prelude.putPacked 83 r.packed_sfixed32 Prelude.encodeSfixed32
  Prelude.putPacked 84 r.packed_sfixed64 Prelude.encodeSfixed64
  Prelude.putPacked 85 r.packed_float Prelude.encodeFloat
  Prelude.putPacked 86 r.packed_double Prelude.encodeDouble
  Prelude.putPacked 87 r.packed_bool Prelude.encodeBool
  Prelude.putPacked 88 r.packed_nested_enum Prelude.putEnum
  Prelude.putRepeated 89 r.unpacked_int32 Prelude.encodeInt32Field
  Prelude.putRepeated 90 r.unpacked_int64 Prelude.encodeInt64Field
  Prelude.putRepeated 91 r.unpacked_uint32 Prelude.encodeUint32Field
  Prelude.putRepeated 92 r.unpacked_uint64 Prelude.encodeUint64Field
  Prelude.putRepeated 93 r.unpacked_sint32 Prelude.encodeSint32Field
  Prelude.putRepeated 94 r.unpacked_sint64 Prelude.encodeSint64Field
  Prelude.putRepeated 95 r.unpacked_fixed32 Prelude.encodeFixed32Field
  Prelude.putRepeated 96 r.unpacked_fixed64 Prelude.encodeFixed64Field
  Prelude.putRepeated 97 r.unpacked_sfixed32 Prelude.encodeSfixed32Field
  Prelude.putRepeated 98 r.unpacked_sfixed64 Prelude.encodeSfixed64Field
  Prelude.putRepeated 99 r.unpacked_float Prelude.encodeFloatField
  Prelude.putRepeated 100 r.unpacked_double Prelude.encodeDoubleField
  Prelude.putRepeated 101 r.unpacked_bool Prelude.encodeBoolField
  Prelude.putRepeated 102 r.unpacked_nested_enum Prelude.putEnumField
  Prelude.putRepeated 56 r.map_int32_int32 $ Prelude.putLenDel putTestAllTypesProto3_MapInt32Int32Entry
  Prelude.putRepeated 57 r.map_int64_int64 $ Prelude.putLenDel putTestAllTypesProto3_MapInt64Int64Entry
  Prelude.putRepeated 58 r.map_uint32_uint32 $ Prelude.putLenDel putTestAllTypesProto3_MapUint32Uint32Entry
  Prelude.putRepeated 59 r.map_uint64_uint64 $ Prelude.putLenDel putTestAllTypesProto3_MapUint64Uint64Entry
  Prelude.putRepeated 60 r.map_sint32_sint32 $ Prelude.putLenDel putTestAllTypesProto3_MapSint32Sint32Entry
  Prelude.putRepeated 61 r.map_sint64_sint64 $ Prelude.putLenDel putTestAllTypesProto3_MapSint64Sint64Entry
  Prelude.putRepeated 62 r.map_fixed32_fixed32 $ Prelude.putLenDel putTestAllTypesProto3_MapFixed32Fixed32Entry
  Prelude.putRepeated 63 r.map_fixed64_fixed64 $ Prelude.putLenDel putTestAllTypesProto3_MapFixed64Fixed64Entry
  Prelude.putRepeated 64 r.map_sfixed32_sfixed32 $ Prelude.putLenDel putTestAllTypesProto3_MapSfixed32Sfixed32Entry
  Prelude.putRepeated 65 r.map_sfixed64_sfixed64 $ Prelude.putLenDel putTestAllTypesProto3_MapSfixed64Sfixed64Entry
  Prelude.putRepeated 66 r.map_int32_float $ Prelude.putLenDel putTestAllTypesProto3_MapInt32FloatEntry
  Prelude.putRepeated 67 r.map_int32_double $ Prelude.putLenDel putTestAllTypesProto3_MapInt32DoubleEntry
  Prelude.putRepeated 68 r.map_bool_bool $ Prelude.putLenDel putTestAllTypesProto3_MapBoolBoolEntry
  Prelude.putRepeated 69 r.map_string_string $ Prelude.putLenDel putTestAllTypesProto3_MapStringStringEntry
  Prelude.putRepeated 70 r.map_string_bytes $ Prelude.putLenDel putTestAllTypesProto3_MapStringBytesEntry
  Prelude.putRepeated 71 r.map_string_nested_message $ Prelude.putLenDel putTestAllTypesProto3_MapStringNestedMessageEntry
  Prelude.putRepeated 72 r.map_string_foreign_message $ Prelude.putLenDel putTestAllTypesProto3_MapStringForeignMessageEntry
  Prelude.putRepeated 73 r.map_string_nested_enum $ Prelude.putLenDel putTestAllTypesProto3_MapStringNestedEnumEntry
  Prelude.putRepeated 74 r.map_string_foreign_enum $ Prelude.putLenDel putTestAllTypesProto3_MapStringForeignEnumEntry
  Prelude.putOptional 201 r.optional_bool_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putBoolValue
  Prelude.putOptional 202 r.optional_int32_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putInt32Value
  Prelude.putOptional 203 r.optional_int64_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putInt64Value
  Prelude.putOptional 204 r.optional_uint32_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putUInt32Value
  Prelude.putOptional 205 r.optional_uint64_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putUInt64Value
  Prelude.putOptional 206 r.optional_float_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putFloatValue
  Prelude.putOptional 207 r.optional_double_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putDoubleValue
  Prelude.putOptional 208 r.optional_string_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putStringValue
  Prelude.putOptional 209 r.optional_bytes_wrapper (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putBytesValue
  Prelude.putRepeated 211 r.repeated_bool_wrapper $ Prelude.putLenDel Google.Protobuf.putBoolValue
  Prelude.putRepeated 212 r.repeated_int32_wrapper $ Prelude.putLenDel Google.Protobuf.putInt32Value
  Prelude.putRepeated 213 r.repeated_int64_wrapper $ Prelude.putLenDel Google.Protobuf.putInt64Value
  Prelude.putRepeated 214 r.repeated_uint32_wrapper $ Prelude.putLenDel Google.Protobuf.putUInt32Value
  Prelude.putRepeated 215 r.repeated_uint64_wrapper $ Prelude.putLenDel Google.Protobuf.putUInt64Value
  Prelude.putRepeated 216 r.repeated_float_wrapper $ Prelude.putLenDel Google.Protobuf.putFloatValue
  Prelude.putRepeated 217 r.repeated_double_wrapper $ Prelude.putLenDel Google.Protobuf.putDoubleValue
  Prelude.putRepeated 218 r.repeated_string_wrapper $ Prelude.putLenDel Google.Protobuf.putStringValue
  Prelude.putRepeated 219 r.repeated_bytes_wrapper $ Prelude.putLenDel Google.Protobuf.putBytesValue
  Prelude.putOptional 301 r.optional_duration (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putDuration
  Prelude.putOptional 302 r.optional_timestamp (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putTimestamp
  Prelude.putOptional 303 r.optional_field_mask (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putFieldMask
  Prelude.putOptional 304 r.optional_struct (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putStruct
  Prelude.putOptional 305 r.optional_any (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putAny
  Prelude.putOptional 306 r.optional_value (\_ -> false) $ Prelude.putLenDel Google.Protobuf.putValue
  Prelude.putOptional 307 r.optional_null_value Prelude.isDefault Prelude.putEnumField
  Prelude.putRepeated 311 r.repeated_duration $ Prelude.putLenDel Google.Protobuf.putDuration
  Prelude.putRepeated 312 r.repeated_timestamp $ Prelude.putLenDel Google.Protobuf.putTimestamp
  Prelude.putRepeated 313 r.repeated_fieldmask $ Prelude.putLenDel Google.Protobuf.putFieldMask
  Prelude.putRepeated 324 r.repeated_struct $ Prelude.putLenDel Google.Protobuf.putStruct
  Prelude.putRepeated 315 r.repeated_any $ Prelude.putLenDel Google.Protobuf.putAny
  Prelude.putRepeated 316 r.repeated_value $ Prelude.putLenDel Google.Protobuf.putValue
  Prelude.putRepeated 317 r.repeated_list_value $ Prelude.putLenDel Google.Protobuf.putListValue
  Prelude.putOptional 401 r.fieldname1 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 402 r.field_name2 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 403 r._field_name3 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 404 r.field__name4_ Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 405 r.field0name5 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 406 r.field_0_name6 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 407 r.fieldName7 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 408 r.fieldName8 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 409 r.field_Name9 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 410 r.field_Name10 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 411 r.fIELD_NAME11 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 412 r.fIELD_name12 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 413 r.__field_name13 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 414 r.__Field_name14 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 415 r.field__name15 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 416 r.field__Name16 Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 417 r.field_name17__ Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 418 r.field_name18__ Prelude.isDefault Prelude.encodeInt32Field
  case r.oneof_field of
    Prelude.Nothing -> pure Prelude.unit
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_uint32 x) -> Prelude.putOptional 111 (Prelude.Just x) (\_ -> false) Prelude.encodeUint32Field
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_nested_message x) -> Prelude.putOptional 112 (Prelude.Just x) (\_ -> false) $ Prelude.putLenDel putTestAllTypesProto3_NestedMessage
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_string x) -> Prelude.putOptional 113 (Prelude.Just x) (\_ -> false) Prelude.encodeStringField
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_bytes x) -> Prelude.putOptional 114 (Prelude.Just x) (\_ -> false) Prelude.encodeBytesField
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_bool x) -> Prelude.putOptional 115 (Prelude.Just x) (\_ -> false) Prelude.encodeBoolField
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_uint64 x) -> Prelude.putOptional 116 (Prelude.Just x) (\_ -> false) Prelude.encodeUint64Field
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_float x) -> Prelude.putOptional 117 (Prelude.Just x) (\_ -> false) Prelude.encodeFloatField
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_double x) -> Prelude.putOptional 118 (Prelude.Just x) (\_ -> false) Prelude.encodeDoubleField
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_enum x) -> Prelude.putOptional 119 (Prelude.Just x) (\_ -> false) Prelude.putEnumField
    Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_null_value x) -> Prelude.putOptional 120 (Prelude.Just x) (\_ -> false) Prelude.putEnumField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3
parseTestAllTypesProto3 length = Prelude.label "TestAllTypesProto3 / " $
  Prelude.parseMessage TestAllTypesProto3 defaultTestAllTypesProto3 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3R TestAllTypesProto3R)
  parseField 1 Prelude.VarInt = Prelude.label "optional_int32 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_int32") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "optional_int64 / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_int64") $ \_ -> Prelude.Just x
  parseField 3 Prelude.VarInt = Prelude.label "optional_uint32 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_uint32") $ \_ -> Prelude.Just x
  parseField 4 Prelude.VarInt = Prelude.label "optional_uint64 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_uint64") $ \_ -> Prelude.Just x
  parseField 5 Prelude.VarInt = Prelude.label "optional_sint32 / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_sint32") $ \_ -> Prelude.Just x
  parseField 6 Prelude.VarInt = Prelude.label "optional_sint64 / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_sint64") $ \_ -> Prelude.Just x
  parseField 7 Prelude.Bits32 = Prelude.label "optional_fixed32 / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_fixed32") $ \_ -> Prelude.Just x
  parseField 8 Prelude.Bits64 = Prelude.label "optional_fixed64 / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_fixed64") $ \_ -> Prelude.Just x
  parseField 9 Prelude.Bits32 = Prelude.label "optional_sfixed32 / " $ do
    x <- Prelude.decodeSfixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_sfixed32") $ \_ -> Prelude.Just x
  parseField 10 Prelude.Bits64 = Prelude.label "optional_sfixed64 / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_sfixed64") $ \_ -> Prelude.Just x
  parseField 11 Prelude.Bits32 = Prelude.label "optional_float / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_float") $ \_ -> Prelude.Just x
  parseField 12 Prelude.Bits64 = Prelude.label "optional_double / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_double") $ \_ -> Prelude.Just x
  parseField 13 Prelude.VarInt = Prelude.label "optional_bool / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_bool") $ \_ -> Prelude.Just x
  parseField 14 Prelude.LenDel = Prelude.label "optional_string / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_string") $ \_ -> Prelude.Just x
  parseField 15 Prelude.LenDel = Prelude.label "optional_bytes / " $ do
    x <- Prelude.decodeBytes
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_bytes") $ \_ -> Prelude.Just x
  parseField 18 Prelude.LenDel = Prelude.label "optional_nested_message / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_NestedMessage
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_nested_message") $ Prelude.Just Prelude.<<< Prelude.maybe x (mergeTestAllTypesProto3_NestedMessage x)
  parseField 19 Prelude.LenDel = Prelude.label "optional_foreign_message / " $ do
    x <- Prelude.parseLenDel parseForeignMessage
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_foreign_message") $ Prelude.Just Prelude.<<< Prelude.maybe x (mergeForeignMessage x)
  parseField 21 Prelude.VarInt = Prelude.label "optional_nested_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_nested_enum") $ \_ -> Prelude.Just x
  parseField 22 Prelude.VarInt = Prelude.label "optional_foreign_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_foreign_enum") $ \_ -> Prelude.Just x
  parseField 23 Prelude.VarInt = Prelude.label "optional_aliased_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_aliased_enum") $ \_ -> Prelude.Just x
  parseField 24 Prelude.LenDel = Prelude.label "optional_string_piece / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_string_piece") $ \_ -> Prelude.Just x
  parseField 25 Prelude.LenDel = Prelude.label "optional_cord / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_cord") $ \_ -> Prelude.Just x
  parseField 27 Prelude.LenDel = Prelude.label "recursive_message / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "recursive_message") $ Prelude.Just Prelude.<<< Prelude.maybe x (mergeTestAllTypesProto3 x)
  parseField 31 Prelude.VarInt = Prelude.label "repeated_int32 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_int32") $ Prelude.flip Prelude.snoc x
  parseField 31 Prelude.LenDel = Prelude.label "repeated_int32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_int32") $ Prelude.flip Prelude.append x
  parseField 32 Prelude.VarInt = Prelude.label "repeated_int64 / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_int64") $ Prelude.flip Prelude.snoc x
  parseField 32 Prelude.LenDel = Prelude.label "repeated_int64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_int64") $ Prelude.flip Prelude.append x
  parseField 33 Prelude.VarInt = Prelude.label "repeated_uint32 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_uint32") $ Prelude.flip Prelude.snoc x
  parseField 33 Prelude.LenDel = Prelude.label "repeated_uint32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_uint32") $ Prelude.flip Prelude.append x
  parseField 34 Prelude.VarInt = Prelude.label "repeated_uint64 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_uint64") $ Prelude.flip Prelude.snoc x
  parseField 34 Prelude.LenDel = Prelude.label "repeated_uint64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_uint64") $ Prelude.flip Prelude.append x
  parseField 35 Prelude.VarInt = Prelude.label "repeated_sint32 / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sint32") $ Prelude.flip Prelude.snoc x
  parseField 35 Prelude.LenDel = Prelude.label "repeated_sint32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sint32") $ Prelude.flip Prelude.append x
  parseField 36 Prelude.VarInt = Prelude.label "repeated_sint64 / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sint64") $ Prelude.flip Prelude.snoc x
  parseField 36 Prelude.LenDel = Prelude.label "repeated_sint64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sint64") $ Prelude.flip Prelude.append x
  parseField 37 Prelude.Bits32 = Prelude.label "repeated_fixed32 / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_fixed32") $ Prelude.flip Prelude.snoc x
  parseField 37 Prelude.LenDel = Prelude.label "repeated_fixed32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed32Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_fixed32") $ Prelude.flip Prelude.append x
  parseField 38 Prelude.Bits64 = Prelude.label "repeated_fixed64 / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_fixed64") $ Prelude.flip Prelude.snoc x
  parseField 38 Prelude.LenDel = Prelude.label "repeated_fixed64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_fixed64") $ Prelude.flip Prelude.append x
  parseField 39 Prelude.Bits32 = Prelude.label "repeated_sfixed32 / " $ do
    x <- Prelude.decodeSfixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sfixed32") $ Prelude.flip Prelude.snoc x
  parseField 39 Prelude.LenDel = Prelude.label "repeated_sfixed32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeSfixed32Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sfixed32") $ Prelude.flip Prelude.append x
  parseField 40 Prelude.Bits64 = Prelude.label "repeated_sfixed64 / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sfixed64") $ Prelude.flip Prelude.snoc x
  parseField 40 Prelude.LenDel = Prelude.label "repeated_sfixed64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeSfixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_sfixed64") $ Prelude.flip Prelude.append x
  parseField 41 Prelude.Bits32 = Prelude.label "repeated_float / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_float") $ Prelude.flip Prelude.snoc x
  parseField 41 Prelude.LenDel = Prelude.label "repeated_float / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFloatArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_float") $ Prelude.flip Prelude.append x
  parseField 42 Prelude.Bits64 = Prelude.label "repeated_double / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_double") $ Prelude.flip Prelude.snoc x
  parseField 42 Prelude.LenDel = Prelude.label "repeated_double / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeDoubleArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_double") $ Prelude.flip Prelude.append x
  parseField 43 Prelude.VarInt = Prelude.label "repeated_bool / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_bool") $ Prelude.flip Prelude.snoc x
  parseField 43 Prelude.LenDel = Prelude.label "repeated_bool / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_bool") $ Prelude.flip Prelude.append x
  parseField 44 Prelude.LenDel = Prelude.label "repeated_string / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_string") $ Prelude.flip Prelude.snoc x
  parseField 45 Prelude.LenDel = Prelude.label "repeated_bytes / " $ do
    x <- Prelude.decodeBytes
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_bytes") $ Prelude.flip Prelude.snoc x
  parseField 48 Prelude.LenDel = Prelude.label "repeated_nested_message / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_NestedMessage
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_nested_message") $ Prelude.flip Prelude.snoc x
  parseField 49 Prelude.LenDel = Prelude.label "repeated_foreign_message / " $ do
    x <- Prelude.parseLenDel parseForeignMessage
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_foreign_message") $ Prelude.flip Prelude.snoc x
  parseField 51 Prelude.VarInt = Prelude.label "repeated_nested_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_nested_enum") $ Prelude.flip Prelude.snoc x
  parseField 51 Prelude.LenDel = Prelude.label "repeated_nested_enum / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_nested_enum") $ Prelude.flip Prelude.append x
  parseField 52 Prelude.VarInt = Prelude.label "repeated_foreign_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_foreign_enum") $ Prelude.flip Prelude.snoc x
  parseField 52 Prelude.LenDel = Prelude.label "repeated_foreign_enum / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_foreign_enum") $ Prelude.flip Prelude.append x
  parseField 54 Prelude.LenDel = Prelude.label "repeated_string_piece / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_string_piece") $ Prelude.flip Prelude.snoc x
  parseField 55 Prelude.LenDel = Prelude.label "repeated_cord / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_cord") $ Prelude.flip Prelude.snoc x
  parseField 75 Prelude.VarInt = Prelude.label "packed_int32 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_int32") $ Prelude.flip Prelude.snoc x
  parseField 75 Prelude.LenDel = Prelude.label "packed_int32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_int32") $ Prelude.flip Prelude.append x
  parseField 76 Prelude.VarInt = Prelude.label "packed_int64 / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_int64") $ Prelude.flip Prelude.snoc x
  parseField 76 Prelude.LenDel = Prelude.label "packed_int64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_int64") $ Prelude.flip Prelude.append x
  parseField 77 Prelude.VarInt = Prelude.label "packed_uint32 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_uint32") $ Prelude.flip Prelude.snoc x
  parseField 77 Prelude.LenDel = Prelude.label "packed_uint32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_uint32") $ Prelude.flip Prelude.append x
  parseField 78 Prelude.VarInt = Prelude.label "packed_uint64 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_uint64") $ Prelude.flip Prelude.snoc x
  parseField 78 Prelude.LenDel = Prelude.label "packed_uint64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_uint64") $ Prelude.flip Prelude.append x
  parseField 79 Prelude.VarInt = Prelude.label "packed_sint32 / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sint32") $ Prelude.flip Prelude.snoc x
  parseField 79 Prelude.LenDel = Prelude.label "packed_sint32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sint32") $ Prelude.flip Prelude.append x
  parseField 80 Prelude.VarInt = Prelude.label "packed_sint64 / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sint64") $ Prelude.flip Prelude.snoc x
  parseField 80 Prelude.LenDel = Prelude.label "packed_sint64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sint64") $ Prelude.flip Prelude.append x
  parseField 81 Prelude.Bits32 = Prelude.label "packed_fixed32 / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_fixed32") $ Prelude.flip Prelude.snoc x
  parseField 81 Prelude.LenDel = Prelude.label "packed_fixed32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed32Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_fixed32") $ Prelude.flip Prelude.append x
  parseField 82 Prelude.Bits64 = Prelude.label "packed_fixed64 / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_fixed64") $ Prelude.flip Prelude.snoc x
  parseField 82 Prelude.LenDel = Prelude.label "packed_fixed64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_fixed64") $ Prelude.flip Prelude.append x
  parseField 83 Prelude.Bits32 = Prelude.label "packed_sfixed32 / " $ do
    x <- Prelude.decodeSfixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sfixed32") $ Prelude.flip Prelude.snoc x
  parseField 83 Prelude.LenDel = Prelude.label "packed_sfixed32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeSfixed32Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sfixed32") $ Prelude.flip Prelude.append x
  parseField 84 Prelude.Bits64 = Prelude.label "packed_sfixed64 / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sfixed64") $ Prelude.flip Prelude.snoc x
  parseField 84 Prelude.LenDel = Prelude.label "packed_sfixed64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeSfixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_sfixed64") $ Prelude.flip Prelude.append x
  parseField 85 Prelude.Bits32 = Prelude.label "packed_float / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_float") $ Prelude.flip Prelude.snoc x
  parseField 85 Prelude.LenDel = Prelude.label "packed_float / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFloatArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_float") $ Prelude.flip Prelude.append x
  parseField 86 Prelude.Bits64 = Prelude.label "packed_double / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_double") $ Prelude.flip Prelude.snoc x
  parseField 86 Prelude.LenDel = Prelude.label "packed_double / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeDoubleArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_double") $ Prelude.flip Prelude.append x
  parseField 87 Prelude.VarInt = Prelude.label "packed_bool / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_bool") $ Prelude.flip Prelude.snoc x
  parseField 87 Prelude.LenDel = Prelude.label "packed_bool / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_bool") $ Prelude.flip Prelude.append x
  parseField 88 Prelude.VarInt = Prelude.label "packed_nested_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_nested_enum") $ Prelude.flip Prelude.snoc x
  parseField 88 Prelude.LenDel = Prelude.label "packed_nested_enum / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "packed_nested_enum") $ Prelude.flip Prelude.append x
  parseField 89 Prelude.VarInt = Prelude.label "unpacked_int32 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_int32") $ Prelude.flip Prelude.snoc x
  parseField 89 Prelude.LenDel = Prelude.label "unpacked_int32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_int32") $ Prelude.flip Prelude.append x
  parseField 90 Prelude.VarInt = Prelude.label "unpacked_int64 / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_int64") $ Prelude.flip Prelude.snoc x
  parseField 90 Prelude.LenDel = Prelude.label "unpacked_int64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_int64") $ Prelude.flip Prelude.append x
  parseField 91 Prelude.VarInt = Prelude.label "unpacked_uint32 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_uint32") $ Prelude.flip Prelude.snoc x
  parseField 91 Prelude.LenDel = Prelude.label "unpacked_uint32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_uint32") $ Prelude.flip Prelude.append x
  parseField 92 Prelude.VarInt = Prelude.label "unpacked_uint64 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_uint64") $ Prelude.flip Prelude.snoc x
  parseField 92 Prelude.LenDel = Prelude.label "unpacked_uint64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_uint64") $ Prelude.flip Prelude.append x
  parseField 93 Prelude.VarInt = Prelude.label "unpacked_sint32 / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sint32") $ Prelude.flip Prelude.snoc x
  parseField 93 Prelude.LenDel = Prelude.label "unpacked_sint32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sint32") $ Prelude.flip Prelude.append x
  parseField 94 Prelude.VarInt = Prelude.label "unpacked_sint64 / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sint64") $ Prelude.flip Prelude.snoc x
  parseField 94 Prelude.LenDel = Prelude.label "unpacked_sint64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sint64") $ Prelude.flip Prelude.append x
  parseField 95 Prelude.Bits32 = Prelude.label "unpacked_fixed32 / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_fixed32") $ Prelude.flip Prelude.snoc x
  parseField 95 Prelude.LenDel = Prelude.label "unpacked_fixed32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed32Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_fixed32") $ Prelude.flip Prelude.append x
  parseField 96 Prelude.Bits64 = Prelude.label "unpacked_fixed64 / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_fixed64") $ Prelude.flip Prelude.snoc x
  parseField 96 Prelude.LenDel = Prelude.label "unpacked_fixed64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_fixed64") $ Prelude.flip Prelude.append x
  parseField 97 Prelude.Bits32 = Prelude.label "unpacked_sfixed32 / " $ do
    x <- Prelude.decodeSfixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sfixed32") $ Prelude.flip Prelude.snoc x
  parseField 97 Prelude.LenDel = Prelude.label "unpacked_sfixed32 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeSfixed32Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sfixed32") $ Prelude.flip Prelude.append x
  parseField 98 Prelude.Bits64 = Prelude.label "unpacked_sfixed64 / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sfixed64") $ Prelude.flip Prelude.snoc x
  parseField 98 Prelude.LenDel = Prelude.label "unpacked_sfixed64 / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeSfixed64Array
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_sfixed64") $ Prelude.flip Prelude.append x
  parseField 99 Prelude.Bits32 = Prelude.label "unpacked_float / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_float") $ Prelude.flip Prelude.snoc x
  parseField 99 Prelude.LenDel = Prelude.label "unpacked_float / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeFloatArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_float") $ Prelude.flip Prelude.append x
  parseField 100 Prelude.Bits64 = Prelude.label "unpacked_double / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_double") $ Prelude.flip Prelude.snoc x
  parseField 100 Prelude.LenDel = Prelude.label "unpacked_double / " $ do
    x <- Prelude.parseLenDel $ Prelude.decodeDoubleArray
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_double") $ Prelude.flip Prelude.append x
  parseField 101 Prelude.VarInt = Prelude.label "unpacked_bool / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_bool") $ Prelude.flip Prelude.snoc x
  parseField 101 Prelude.LenDel = Prelude.label "unpacked_bool / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_bool") $ Prelude.flip Prelude.append x
  parseField 102 Prelude.VarInt = Prelude.label "unpacked_nested_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_nested_enum") $ Prelude.flip Prelude.snoc x
  parseField 102 Prelude.LenDel = Prelude.label "unpacked_nested_enum / " $ do
    x <- Prelude.parseLenDel $ Prelude.manyLength Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "unpacked_nested_enum") $ Prelude.flip Prelude.append x
  parseField 56 Prelude.LenDel = Prelude.label "map_int32_int32 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapInt32Int32Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_int32_int32") $ Prelude.flip Prelude.snoc x
  parseField 57 Prelude.LenDel = Prelude.label "map_int64_int64 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapInt64Int64Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_int64_int64") $ Prelude.flip Prelude.snoc x
  parseField 58 Prelude.LenDel = Prelude.label "map_uint32_uint32 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapUint32Uint32Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_uint32_uint32") $ Prelude.flip Prelude.snoc x
  parseField 59 Prelude.LenDel = Prelude.label "map_uint64_uint64 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapUint64Uint64Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_uint64_uint64") $ Prelude.flip Prelude.snoc x
  parseField 60 Prelude.LenDel = Prelude.label "map_sint32_sint32 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapSint32Sint32Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_sint32_sint32") $ Prelude.flip Prelude.snoc x
  parseField 61 Prelude.LenDel = Prelude.label "map_sint64_sint64 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapSint64Sint64Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_sint64_sint64") $ Prelude.flip Prelude.snoc x
  parseField 62 Prelude.LenDel = Prelude.label "map_fixed32_fixed32 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapFixed32Fixed32Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_fixed32_fixed32") $ Prelude.flip Prelude.snoc x
  parseField 63 Prelude.LenDel = Prelude.label "map_fixed64_fixed64 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapFixed64Fixed64Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_fixed64_fixed64") $ Prelude.flip Prelude.snoc x
  parseField 64 Prelude.LenDel = Prelude.label "map_sfixed32_sfixed32 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapSfixed32Sfixed32Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_sfixed32_sfixed32") $ Prelude.flip Prelude.snoc x
  parseField 65 Prelude.LenDel = Prelude.label "map_sfixed64_sfixed64 / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapSfixed64Sfixed64Entry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_sfixed64_sfixed64") $ Prelude.flip Prelude.snoc x
  parseField 66 Prelude.LenDel = Prelude.label "map_int32_float / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapInt32FloatEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_int32_float") $ Prelude.flip Prelude.snoc x
  parseField 67 Prelude.LenDel = Prelude.label "map_int32_double / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapInt32DoubleEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_int32_double") $ Prelude.flip Prelude.snoc x
  parseField 68 Prelude.LenDel = Prelude.label "map_bool_bool / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapBoolBoolEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_bool_bool") $ Prelude.flip Prelude.snoc x
  parseField 69 Prelude.LenDel = Prelude.label "map_string_string / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapStringStringEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_string_string") $ Prelude.flip Prelude.snoc x
  parseField 70 Prelude.LenDel = Prelude.label "map_string_bytes / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapStringBytesEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_string_bytes") $ Prelude.flip Prelude.snoc x
  parseField 71 Prelude.LenDel = Prelude.label "map_string_nested_message / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapStringNestedMessageEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_string_nested_message") $ Prelude.flip Prelude.snoc x
  parseField 72 Prelude.LenDel = Prelude.label "map_string_foreign_message / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapStringForeignMessageEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_string_foreign_message") $ Prelude.flip Prelude.snoc x
  parseField 73 Prelude.LenDel = Prelude.label "map_string_nested_enum / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapStringNestedEnumEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_string_nested_enum") $ Prelude.flip Prelude.snoc x
  parseField 74 Prelude.LenDel = Prelude.label "map_string_foreign_enum / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_MapStringForeignEnumEntry
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "map_string_foreign_enum") $ Prelude.flip Prelude.snoc x
  parseField 111 Prelude.VarInt = Prelude.label "oneof_uint32 / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_uint32 x)
  parseField 112 Prelude.LenDel = Prelude.label "oneof_nested_message / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_NestedMessage
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ mergeTestAllTypesProto3_Oneof_field (Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_nested_message x))
  parseField 113 Prelude.LenDel = Prelude.label "oneof_string / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_string x)
  parseField 114 Prelude.LenDel = Prelude.label "oneof_bytes / " $ do
    x <- Prelude.decodeBytes
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_bytes x)
  parseField 115 Prelude.VarInt = Prelude.label "oneof_bool / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_bool x)
  parseField 116 Prelude.VarInt = Prelude.label "oneof_uint64 / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_uint64 x)
  parseField 117 Prelude.Bits32 = Prelude.label "oneof_float / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_float x)
  parseField 118 Prelude.Bits64 = Prelude.label "oneof_double / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_double x)
  parseField 119 Prelude.VarInt = Prelude.label "oneof_enum / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_enum x)
  parseField 120 Prelude.VarInt = Prelude.label "oneof_null_value / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "oneof_field") $ \_ -> Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_null_value x)
  parseField 201 Prelude.LenDel = Prelude.label "optional_bool_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseBoolValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_bool_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeBoolValue x)
  parseField 202 Prelude.LenDel = Prelude.label "optional_int32_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseInt32Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_int32_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeInt32Value x)
  parseField 203 Prelude.LenDel = Prelude.label "optional_int64_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseInt64Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_int64_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeInt64Value x)
  parseField 204 Prelude.LenDel = Prelude.label "optional_uint32_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseUInt32Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_uint32_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeUInt32Value x)
  parseField 205 Prelude.LenDel = Prelude.label "optional_uint64_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseUInt64Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_uint64_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeUInt64Value x)
  parseField 206 Prelude.LenDel = Prelude.label "optional_float_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseFloatValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_float_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeFloatValue x)
  parseField 207 Prelude.LenDel = Prelude.label "optional_double_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseDoubleValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_double_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeDoubleValue x)
  parseField 208 Prelude.LenDel = Prelude.label "optional_string_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseStringValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_string_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeStringValue x)
  parseField 209 Prelude.LenDel = Prelude.label "optional_bytes_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseBytesValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_bytes_wrapper") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeBytesValue x)
  parseField 211 Prelude.LenDel = Prelude.label "repeated_bool_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseBoolValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_bool_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 212 Prelude.LenDel = Prelude.label "repeated_int32_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseInt32Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_int32_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 213 Prelude.LenDel = Prelude.label "repeated_int64_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseInt64Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_int64_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 214 Prelude.LenDel = Prelude.label "repeated_uint32_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseUInt32Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_uint32_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 215 Prelude.LenDel = Prelude.label "repeated_uint64_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseUInt64Value
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_uint64_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 216 Prelude.LenDel = Prelude.label "repeated_float_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseFloatValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_float_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 217 Prelude.LenDel = Prelude.label "repeated_double_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseDoubleValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_double_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 218 Prelude.LenDel = Prelude.label "repeated_string_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseStringValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_string_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 219 Prelude.LenDel = Prelude.label "repeated_bytes_wrapper / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseBytesValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_bytes_wrapper") $ Prelude.flip Prelude.snoc x
  parseField 301 Prelude.LenDel = Prelude.label "optional_duration / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseDuration
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_duration") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeDuration x)
  parseField 302 Prelude.LenDel = Prelude.label "optional_timestamp / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseTimestamp
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_timestamp") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeTimestamp x)
  parseField 303 Prelude.LenDel = Prelude.label "optional_field_mask / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseFieldMask
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_field_mask") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeFieldMask x)
  parseField 304 Prelude.LenDel = Prelude.label "optional_struct / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseStruct
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_struct") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeStruct x)
  parseField 305 Prelude.LenDel = Prelude.label "optional_any / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseAny
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_any") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeAny x)
  parseField 306 Prelude.LenDel = Prelude.label "optional_value / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_value") $ Prelude.Just Prelude.<<< Prelude.maybe x (Google.Protobuf.mergeValue x)
  parseField 307 Prelude.VarInt = Prelude.label "optional_null_value / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "optional_null_value") $ \_ -> Prelude.Just x
  parseField 311 Prelude.LenDel = Prelude.label "repeated_duration / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseDuration
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_duration") $ Prelude.flip Prelude.snoc x
  parseField 312 Prelude.LenDel = Prelude.label "repeated_timestamp / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseTimestamp
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_timestamp") $ Prelude.flip Prelude.snoc x
  parseField 313 Prelude.LenDel = Prelude.label "repeated_fieldmask / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseFieldMask
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_fieldmask") $ Prelude.flip Prelude.snoc x
  parseField 324 Prelude.LenDel = Prelude.label "repeated_struct / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseStruct
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_struct") $ Prelude.flip Prelude.snoc x
  parseField 315 Prelude.LenDel = Prelude.label "repeated_any / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseAny
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_any") $ Prelude.flip Prelude.snoc x
  parseField 316 Prelude.LenDel = Prelude.label "repeated_value / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_value") $ Prelude.flip Prelude.snoc x
  parseField 317 Prelude.LenDel = Prelude.label "repeated_list_value / " $ do
    x <- Prelude.parseLenDel Google.Protobuf.parseListValue
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "repeated_list_value") $ Prelude.flip Prelude.snoc x
  parseField 401 Prelude.VarInt = Prelude.label "fieldname1 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "fieldname1") $ \_ -> Prelude.Just x
  parseField 402 Prelude.VarInt = Prelude.label "field_name2 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field_name2") $ \_ -> Prelude.Just x
  parseField 403 Prelude.VarInt = Prelude.label "_field_name3 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "_field_name3") $ \_ -> Prelude.Just x
  parseField 404 Prelude.VarInt = Prelude.label "field__name4_ / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field__name4_") $ \_ -> Prelude.Just x
  parseField 405 Prelude.VarInt = Prelude.label "field0name5 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field0name5") $ \_ -> Prelude.Just x
  parseField 406 Prelude.VarInt = Prelude.label "field_0_name6 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field_0_name6") $ \_ -> Prelude.Just x
  parseField 407 Prelude.VarInt = Prelude.label "fieldName7 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "fieldName7") $ \_ -> Prelude.Just x
  parseField 408 Prelude.VarInt = Prelude.label "FieldName8 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "fieldName8") $ \_ -> Prelude.Just x
  parseField 409 Prelude.VarInt = Prelude.label "field_Name9 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field_Name9") $ \_ -> Prelude.Just x
  parseField 410 Prelude.VarInt = Prelude.label "Field_Name10 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field_Name10") $ \_ -> Prelude.Just x
  parseField 411 Prelude.VarInt = Prelude.label "FIELD_NAME11 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "fIELD_NAME11") $ \_ -> Prelude.Just x
  parseField 412 Prelude.VarInt = Prelude.label "FIELD_name12 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "fIELD_name12") $ \_ -> Prelude.Just x
  parseField 413 Prelude.VarInt = Prelude.label "__field_name13 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "__field_name13") $ \_ -> Prelude.Just x
  parseField 414 Prelude.VarInt = Prelude.label "__Field_name14 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "__Field_name14") $ \_ -> Prelude.Just x
  parseField 415 Prelude.VarInt = Prelude.label "field__name15 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field__name15") $ \_ -> Prelude.Just x
  parseField 416 Prelude.VarInt = Prelude.label "field__Name16 / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field__Name16") $ \_ -> Prelude.Just x
  parseField 417 Prelude.VarInt = Prelude.label "field_name17__ / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field_name17__") $ \_ -> Prelude.Just x
  parseField 418 Prelude.VarInt = Prelude.label "Field_name18__ / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "field_name18__") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3 :: TestAllTypesProto3R
defaultTestAllTypesProto3 =
  { optional_int32: Prelude.Nothing
  , optional_int64: Prelude.Nothing
  , optional_uint32: Prelude.Nothing
  , optional_uint64: Prelude.Nothing
  , optional_sint32: Prelude.Nothing
  , optional_sint64: Prelude.Nothing
  , optional_fixed32: Prelude.Nothing
  , optional_fixed64: Prelude.Nothing
  , optional_sfixed32: Prelude.Nothing
  , optional_sfixed64: Prelude.Nothing
  , optional_float: Prelude.Nothing
  , optional_double: Prelude.Nothing
  , optional_bool: Prelude.Nothing
  , optional_string: Prelude.Nothing
  , optional_bytes: Prelude.Nothing
  , optional_nested_message: Prelude.Nothing
  , optional_foreign_message: Prelude.Nothing
  , optional_nested_enum: Prelude.Nothing
  , optional_foreign_enum: Prelude.Nothing
  , optional_aliased_enum: Prelude.Nothing
  , optional_string_piece: Prelude.Nothing
  , optional_cord: Prelude.Nothing
  , recursive_message: Prelude.Nothing
  , repeated_int32: []
  , repeated_int64: []
  , repeated_uint32: []
  , repeated_uint64: []
  , repeated_sint32: []
  , repeated_sint64: []
  , repeated_fixed32: []
  , repeated_fixed64: []
  , repeated_sfixed32: []
  , repeated_sfixed64: []
  , repeated_float: []
  , repeated_double: []
  , repeated_bool: []
  , repeated_string: []
  , repeated_bytes: []
  , repeated_nested_message: []
  , repeated_foreign_message: []
  , repeated_nested_enum: []
  , repeated_foreign_enum: []
  , repeated_string_piece: []
  , repeated_cord: []
  , packed_int32: []
  , packed_int64: []
  , packed_uint32: []
  , packed_uint64: []
  , packed_sint32: []
  , packed_sint64: []
  , packed_fixed32: []
  , packed_fixed64: []
  , packed_sfixed32: []
  , packed_sfixed64: []
  , packed_float: []
  , packed_double: []
  , packed_bool: []
  , packed_nested_enum: []
  , unpacked_int32: []
  , unpacked_int64: []
  , unpacked_uint32: []
  , unpacked_uint64: []
  , unpacked_sint32: []
  , unpacked_sint64: []
  , unpacked_fixed32: []
  , unpacked_fixed64: []
  , unpacked_sfixed32: []
  , unpacked_sfixed64: []
  , unpacked_float: []
  , unpacked_double: []
  , unpacked_bool: []
  , unpacked_nested_enum: []
  , map_int32_int32: []
  , map_int64_int64: []
  , map_uint32_uint32: []
  , map_uint64_uint64: []
  , map_sint32_sint32: []
  , map_sint64_sint64: []
  , map_fixed32_fixed32: []
  , map_fixed64_fixed64: []
  , map_sfixed32_sfixed32: []
  , map_sfixed64_sfixed64: []
  , map_int32_float: []
  , map_int32_double: []
  , map_bool_bool: []
  , map_string_string: []
  , map_string_bytes: []
  , map_string_nested_message: []
  , map_string_foreign_message: []
  , map_string_nested_enum: []
  , map_string_foreign_enum: []
  , optional_bool_wrapper: Prelude.Nothing
  , optional_int32_wrapper: Prelude.Nothing
  , optional_int64_wrapper: Prelude.Nothing
  , optional_uint32_wrapper: Prelude.Nothing
  , optional_uint64_wrapper: Prelude.Nothing
  , optional_float_wrapper: Prelude.Nothing
  , optional_double_wrapper: Prelude.Nothing
  , optional_string_wrapper: Prelude.Nothing
  , optional_bytes_wrapper: Prelude.Nothing
  , repeated_bool_wrapper: []
  , repeated_int32_wrapper: []
  , repeated_int64_wrapper: []
  , repeated_uint32_wrapper: []
  , repeated_uint64_wrapper: []
  , repeated_float_wrapper: []
  , repeated_double_wrapper: []
  , repeated_string_wrapper: []
  , repeated_bytes_wrapper: []
  , optional_duration: Prelude.Nothing
  , optional_timestamp: Prelude.Nothing
  , optional_field_mask: Prelude.Nothing
  , optional_struct: Prelude.Nothing
  , optional_any: Prelude.Nothing
  , optional_value: Prelude.Nothing
  , optional_null_value: Prelude.Nothing
  , repeated_duration: []
  , repeated_timestamp: []
  , repeated_fieldmask: []
  , repeated_struct: []
  , repeated_any: []
  , repeated_value: []
  , repeated_list_value: []
  , fieldname1: Prelude.Nothing
  , field_name2: Prelude.Nothing
  , _field_name3: Prelude.Nothing
  , field__name4_: Prelude.Nothing
  , field0name5: Prelude.Nothing
  , field_0_name6: Prelude.Nothing
  , fieldName7: Prelude.Nothing
  , fieldName8: Prelude.Nothing
  , field_Name9: Prelude.Nothing
  , field_Name10: Prelude.Nothing
  , fIELD_NAME11: Prelude.Nothing
  , fIELD_name12: Prelude.Nothing
  , __field_name13: Prelude.Nothing
  , __Field_name14: Prelude.Nothing
  , field__name15: Prelude.Nothing
  , field__Name16: Prelude.Nothing
  , field_name17__: Prelude.Nothing
  , field_name18__: Prelude.Nothing
  , oneof_field: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3 :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3Row r3 => Prelude.Nub r3 TestAllTypesProto3Row => Record r1 -> TestAllTypesProto3
mkTestAllTypesProto3 r = TestAllTypesProto3 $ Prelude.merge r defaultTestAllTypesProto3
data TestAllTypesProto3_Oneof_field
  = TestAllTypesProto3_Oneof_field_Oneof_uint32 Prelude.UInt
  | TestAllTypesProto3_Oneof_field_Oneof_nested_message TestAllTypesProto3_NestedMessage
  | TestAllTypesProto3_Oneof_field_Oneof_string String
  | TestAllTypesProto3_Oneof_field_Oneof_bytes Prelude.Bytes
  | TestAllTypesProto3_Oneof_field_Oneof_bool Boolean
  | TestAllTypesProto3_Oneof_field_Oneof_uint64 Prelude.UInt64
  | TestAllTypesProto3_Oneof_field_Oneof_float Prelude.Float32
  | TestAllTypesProto3_Oneof_field_Oneof_double Number
  | TestAllTypesProto3_Oneof_field_Oneof_enum TestAllTypesProto3_NestedEnum
  | TestAllTypesProto3_Oneof_field_Oneof_null_value Google.Protobuf.NullValue

derive instance genericTestAllTypesProto3_Oneof_field :: Prelude.Generic TestAllTypesProto3_Oneof_field _
derive instance eqTestAllTypesProto3_Oneof_field :: Prelude.Eq TestAllTypesProto3_Oneof_field
instance showTestAllTypesProto3_Oneof_field :: Prelude.Show TestAllTypesProto3_Oneof_field where show = Prelude.genericShow

mergeTestAllTypesProto3_Oneof_field :: Prelude.Maybe TestAllTypesProto3_Oneof_field -> Prelude.Maybe TestAllTypesProto3_Oneof_field -> Prelude.Maybe TestAllTypesProto3_Oneof_field
mergeTestAllTypesProto3_Oneof_field l r = case Prelude.Tuple l r of
  Prelude.Tuple (Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_nested_message l')) (Prelude.Just (TestAllTypesProto3_Oneof_field_Oneof_nested_message r')) -> Prelude.map TestAllTypesProto3_Oneof_field_Oneof_nested_message $ Prelude.mergeWith mergeTestAllTypesProto3_NestedMessage (Prelude.Just l') (Prelude.Just r')
  _ -> Prelude.alt l r

mergeTestAllTypesProto3 :: TestAllTypesProto3 -> TestAllTypesProto3 -> TestAllTypesProto3
mergeTestAllTypesProto3 (TestAllTypesProto3 l) (TestAllTypesProto3 r) = TestAllTypesProto3
  { optional_int32: Prelude.alt l.optional_int32 r.optional_int32
  , optional_int64: Prelude.alt l.optional_int64 r.optional_int64
  , optional_uint32: Prelude.alt l.optional_uint32 r.optional_uint32
  , optional_uint64: Prelude.alt l.optional_uint64 r.optional_uint64
  , optional_sint32: Prelude.alt l.optional_sint32 r.optional_sint32
  , optional_sint64: Prelude.alt l.optional_sint64 r.optional_sint64
  , optional_fixed32: Prelude.alt l.optional_fixed32 r.optional_fixed32
  , optional_fixed64: Prelude.alt l.optional_fixed64 r.optional_fixed64
  , optional_sfixed32: Prelude.alt l.optional_sfixed32 r.optional_sfixed32
  , optional_sfixed64: Prelude.alt l.optional_sfixed64 r.optional_sfixed64
  , optional_float: Prelude.alt l.optional_float r.optional_float
  , optional_double: Prelude.alt l.optional_double r.optional_double
  , optional_bool: Prelude.alt l.optional_bool r.optional_bool
  , optional_string: Prelude.alt l.optional_string r.optional_string
  , optional_bytes: Prelude.alt l.optional_bytes r.optional_bytes
  , optional_nested_message: Prelude.mergeWith mergeTestAllTypesProto3_NestedMessage l.optional_nested_message r.optional_nested_message
  , optional_foreign_message: Prelude.mergeWith mergeForeignMessage l.optional_foreign_message r.optional_foreign_message
  , optional_nested_enum: Prelude.alt l.optional_nested_enum r.optional_nested_enum
  , optional_foreign_enum: Prelude.alt l.optional_foreign_enum r.optional_foreign_enum
  , optional_aliased_enum: Prelude.alt l.optional_aliased_enum r.optional_aliased_enum
  , optional_string_piece: Prelude.alt l.optional_string_piece r.optional_string_piece
  , optional_cord: Prelude.alt l.optional_cord r.optional_cord
  , recursive_message: Prelude.mergeWith mergeTestAllTypesProto3 l.recursive_message r.recursive_message
  , repeated_int32: r.repeated_int32 <> l.repeated_int32
  , repeated_int64: r.repeated_int64 <> l.repeated_int64
  , repeated_uint32: r.repeated_uint32 <> l.repeated_uint32
  , repeated_uint64: r.repeated_uint64 <> l.repeated_uint64
  , repeated_sint32: r.repeated_sint32 <> l.repeated_sint32
  , repeated_sint64: r.repeated_sint64 <> l.repeated_sint64
  , repeated_fixed32: r.repeated_fixed32 <> l.repeated_fixed32
  , repeated_fixed64: r.repeated_fixed64 <> l.repeated_fixed64
  , repeated_sfixed32: r.repeated_sfixed32 <> l.repeated_sfixed32
  , repeated_sfixed64: r.repeated_sfixed64 <> l.repeated_sfixed64
  , repeated_float: r.repeated_float <> l.repeated_float
  , repeated_double: r.repeated_double <> l.repeated_double
  , repeated_bool: r.repeated_bool <> l.repeated_bool
  , repeated_string: r.repeated_string <> l.repeated_string
  , repeated_bytes: r.repeated_bytes <> l.repeated_bytes
  , repeated_nested_message: r.repeated_nested_message <> l.repeated_nested_message
  , repeated_foreign_message: r.repeated_foreign_message <> l.repeated_foreign_message
  , repeated_nested_enum: r.repeated_nested_enum <> l.repeated_nested_enum
  , repeated_foreign_enum: r.repeated_foreign_enum <> l.repeated_foreign_enum
  , repeated_string_piece: r.repeated_string_piece <> l.repeated_string_piece
  , repeated_cord: r.repeated_cord <> l.repeated_cord
  , packed_int32: r.packed_int32 <> l.packed_int32
  , packed_int64: r.packed_int64 <> l.packed_int64
  , packed_uint32: r.packed_uint32 <> l.packed_uint32
  , packed_uint64: r.packed_uint64 <> l.packed_uint64
  , packed_sint32: r.packed_sint32 <> l.packed_sint32
  , packed_sint64: r.packed_sint64 <> l.packed_sint64
  , packed_fixed32: r.packed_fixed32 <> l.packed_fixed32
  , packed_fixed64: r.packed_fixed64 <> l.packed_fixed64
  , packed_sfixed32: r.packed_sfixed32 <> l.packed_sfixed32
  , packed_sfixed64: r.packed_sfixed64 <> l.packed_sfixed64
  , packed_float: r.packed_float <> l.packed_float
  , packed_double: r.packed_double <> l.packed_double
  , packed_bool: r.packed_bool <> l.packed_bool
  , packed_nested_enum: r.packed_nested_enum <> l.packed_nested_enum
  , unpacked_int32: r.unpacked_int32 <> l.unpacked_int32
  , unpacked_int64: r.unpacked_int64 <> l.unpacked_int64
  , unpacked_uint32: r.unpacked_uint32 <> l.unpacked_uint32
  , unpacked_uint64: r.unpacked_uint64 <> l.unpacked_uint64
  , unpacked_sint32: r.unpacked_sint32 <> l.unpacked_sint32
  , unpacked_sint64: r.unpacked_sint64 <> l.unpacked_sint64
  , unpacked_fixed32: r.unpacked_fixed32 <> l.unpacked_fixed32
  , unpacked_fixed64: r.unpacked_fixed64 <> l.unpacked_fixed64
  , unpacked_sfixed32: r.unpacked_sfixed32 <> l.unpacked_sfixed32
  , unpacked_sfixed64: r.unpacked_sfixed64 <> l.unpacked_sfixed64
  , unpacked_float: r.unpacked_float <> l.unpacked_float
  , unpacked_double: r.unpacked_double <> l.unpacked_double
  , unpacked_bool: r.unpacked_bool <> l.unpacked_bool
  , unpacked_nested_enum: r.unpacked_nested_enum <> l.unpacked_nested_enum
  , map_int32_int32: r.map_int32_int32 <> l.map_int32_int32
  , map_int64_int64: r.map_int64_int64 <> l.map_int64_int64
  , map_uint32_uint32: r.map_uint32_uint32 <> l.map_uint32_uint32
  , map_uint64_uint64: r.map_uint64_uint64 <> l.map_uint64_uint64
  , map_sint32_sint32: r.map_sint32_sint32 <> l.map_sint32_sint32
  , map_sint64_sint64: r.map_sint64_sint64 <> l.map_sint64_sint64
  , map_fixed32_fixed32: r.map_fixed32_fixed32 <> l.map_fixed32_fixed32
  , map_fixed64_fixed64: r.map_fixed64_fixed64 <> l.map_fixed64_fixed64
  , map_sfixed32_sfixed32: r.map_sfixed32_sfixed32 <> l.map_sfixed32_sfixed32
  , map_sfixed64_sfixed64: r.map_sfixed64_sfixed64 <> l.map_sfixed64_sfixed64
  , map_int32_float: r.map_int32_float <> l.map_int32_float
  , map_int32_double: r.map_int32_double <> l.map_int32_double
  , map_bool_bool: r.map_bool_bool <> l.map_bool_bool
  , map_string_string: r.map_string_string <> l.map_string_string
  , map_string_bytes: r.map_string_bytes <> l.map_string_bytes
  , map_string_nested_message: r.map_string_nested_message <> l.map_string_nested_message
  , map_string_foreign_message: r.map_string_foreign_message <> l.map_string_foreign_message
  , map_string_nested_enum: r.map_string_nested_enum <> l.map_string_nested_enum
  , map_string_foreign_enum: r.map_string_foreign_enum <> l.map_string_foreign_enum
  , optional_bool_wrapper: Prelude.mergeWith Google.Protobuf.mergeBoolValue l.optional_bool_wrapper r.optional_bool_wrapper
  , optional_int32_wrapper: Prelude.mergeWith Google.Protobuf.mergeInt32Value l.optional_int32_wrapper r.optional_int32_wrapper
  , optional_int64_wrapper: Prelude.mergeWith Google.Protobuf.mergeInt64Value l.optional_int64_wrapper r.optional_int64_wrapper
  , optional_uint32_wrapper: Prelude.mergeWith Google.Protobuf.mergeUInt32Value l.optional_uint32_wrapper r.optional_uint32_wrapper
  , optional_uint64_wrapper: Prelude.mergeWith Google.Protobuf.mergeUInt64Value l.optional_uint64_wrapper r.optional_uint64_wrapper
  , optional_float_wrapper: Prelude.mergeWith Google.Protobuf.mergeFloatValue l.optional_float_wrapper r.optional_float_wrapper
  , optional_double_wrapper: Prelude.mergeWith Google.Protobuf.mergeDoubleValue l.optional_double_wrapper r.optional_double_wrapper
  , optional_string_wrapper: Prelude.mergeWith Google.Protobuf.mergeStringValue l.optional_string_wrapper r.optional_string_wrapper
  , optional_bytes_wrapper: Prelude.mergeWith Google.Protobuf.mergeBytesValue l.optional_bytes_wrapper r.optional_bytes_wrapper
  , repeated_bool_wrapper: r.repeated_bool_wrapper <> l.repeated_bool_wrapper
  , repeated_int32_wrapper: r.repeated_int32_wrapper <> l.repeated_int32_wrapper
  , repeated_int64_wrapper: r.repeated_int64_wrapper <> l.repeated_int64_wrapper
  , repeated_uint32_wrapper: r.repeated_uint32_wrapper <> l.repeated_uint32_wrapper
  , repeated_uint64_wrapper: r.repeated_uint64_wrapper <> l.repeated_uint64_wrapper
  , repeated_float_wrapper: r.repeated_float_wrapper <> l.repeated_float_wrapper
  , repeated_double_wrapper: r.repeated_double_wrapper <> l.repeated_double_wrapper
  , repeated_string_wrapper: r.repeated_string_wrapper <> l.repeated_string_wrapper
  , repeated_bytes_wrapper: r.repeated_bytes_wrapper <> l.repeated_bytes_wrapper
  , optional_duration: Prelude.mergeWith Google.Protobuf.mergeDuration l.optional_duration r.optional_duration
  , optional_timestamp: Prelude.mergeWith Google.Protobuf.mergeTimestamp l.optional_timestamp r.optional_timestamp
  , optional_field_mask: Prelude.mergeWith Google.Protobuf.mergeFieldMask l.optional_field_mask r.optional_field_mask
  , optional_struct: Prelude.mergeWith Google.Protobuf.mergeStruct l.optional_struct r.optional_struct
  , optional_any: Prelude.mergeWith Google.Protobuf.mergeAny l.optional_any r.optional_any
  , optional_value: Prelude.mergeWith Google.Protobuf.mergeValue l.optional_value r.optional_value
  , optional_null_value: Prelude.alt l.optional_null_value r.optional_null_value
  , repeated_duration: r.repeated_duration <> l.repeated_duration
  , repeated_timestamp: r.repeated_timestamp <> l.repeated_timestamp
  , repeated_fieldmask: r.repeated_fieldmask <> l.repeated_fieldmask
  , repeated_struct: r.repeated_struct <> l.repeated_struct
  , repeated_any: r.repeated_any <> l.repeated_any
  , repeated_value: r.repeated_value <> l.repeated_value
  , repeated_list_value: r.repeated_list_value <> l.repeated_list_value
  , fieldname1: Prelude.alt l.fieldname1 r.fieldname1
  , field_name2: Prelude.alt l.field_name2 r.field_name2
  , _field_name3: Prelude.alt l._field_name3 r._field_name3
  , field__name4_: Prelude.alt l.field__name4_ r.field__name4_
  , field0name5: Prelude.alt l.field0name5 r.field0name5
  , field_0_name6: Prelude.alt l.field_0_name6 r.field_0_name6
  , fieldName7: Prelude.alt l.fieldName7 r.fieldName7
  , fieldName8: Prelude.alt l.fieldName8 r.fieldName8
  , field_Name9: Prelude.alt l.field_Name9 r.field_Name9
  , field_Name10: Prelude.alt l.field_Name10 r.field_Name10
  , fIELD_NAME11: Prelude.alt l.fIELD_NAME11 r.fIELD_NAME11
  , fIELD_name12: Prelude.alt l.fIELD_name12 r.fIELD_name12
  , __field_name13: Prelude.alt l.__field_name13 r.__field_name13
  , __Field_name14: Prelude.alt l.__Field_name14 r.__Field_name14
  , field__name15: Prelude.alt l.field__name15 r.field__name15
  , field__Name16: Prelude.alt l.field__Name16 r.field__Name16
  , field_name17__: Prelude.alt l.field_name17__ r.field_name17__
  , field_name18__: Prelude.alt l.field_name18__ r.field_name18__
  , oneof_field: mergeTestAllTypesProto3_Oneof_field l.oneof_field r.oneof_field
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.NestedMessage`
newtype TestAllTypesProto3_NestedMessage = TestAllTypesProto3_NestedMessage TestAllTypesProto3_NestedMessageR
type TestAllTypesProto3_NestedMessageRow =
  ( a :: Prelude.Maybe Int
  , corecursive :: Prelude.Maybe TestAllTypesProto3
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_NestedMessageR = Record TestAllTypesProto3_NestedMessageRow
derive instance genericTestAllTypesProto3_NestedMessage :: Prelude.Generic TestAllTypesProto3_NestedMessage _
derive instance newtypeTestAllTypesProto3_NestedMessage :: Prelude.Newtype TestAllTypesProto3_NestedMessage _
derive instance eqTestAllTypesProto3_NestedMessage :: Prelude.Eq TestAllTypesProto3_NestedMessage
instance showTestAllTypesProto3_NestedMessage :: Prelude.Show TestAllTypesProto3_NestedMessage where show x = Prelude.genericShow x

putTestAllTypesProto3_NestedMessage :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_NestedMessage -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_NestedMessage (TestAllTypesProto3_NestedMessage r) = do
  Prelude.putOptional 1 r.a Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 2 r.corecursive (\_ -> false) $ Prelude.putLenDel putTestAllTypesProto3
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_NestedMessage :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_NestedMessage
parseTestAllTypesProto3_NestedMessage length = Prelude.label "NestedMessage / " $
  Prelude.parseMessage TestAllTypesProto3_NestedMessage defaultTestAllTypesProto3_NestedMessage parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_NestedMessageR TestAllTypesProto3_NestedMessageR)
  parseField 1 Prelude.VarInt = Prelude.label "a / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "a") $ \_ -> Prelude.Just x
  parseField 2 Prelude.LenDel = Prelude.label "corecursive / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "corecursive") $ Prelude.Just Prelude.<<< Prelude.maybe x (mergeTestAllTypesProto3 x)
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_NestedMessage :: TestAllTypesProto3_NestedMessageR
defaultTestAllTypesProto3_NestedMessage =
  { a: Prelude.Nothing
  , corecursive: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_NestedMessage :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_NestedMessageRow r3 => Prelude.Nub r3 TestAllTypesProto3_NestedMessageRow => Record r1 -> TestAllTypesProto3_NestedMessage
mkTestAllTypesProto3_NestedMessage r = TestAllTypesProto3_NestedMessage $ Prelude.merge r defaultTestAllTypesProto3_NestedMessage

mergeTestAllTypesProto3_NestedMessage :: TestAllTypesProto3_NestedMessage -> TestAllTypesProto3_NestedMessage -> TestAllTypesProto3_NestedMessage
mergeTestAllTypesProto3_NestedMessage (TestAllTypesProto3_NestedMessage l) (TestAllTypesProto3_NestedMessage r) = TestAllTypesProto3_NestedMessage
  { a: Prelude.alt l.a r.a
  , corecursive: Prelude.mergeWith mergeTestAllTypesProto3 l.corecursive r.corecursive
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapInt32Int32Entry`
newtype TestAllTypesProto3_MapInt32Int32Entry = TestAllTypesProto3_MapInt32Int32Entry TestAllTypesProto3_MapInt32Int32EntryR
type TestAllTypesProto3_MapInt32Int32EntryRow =
  ( key :: Prelude.Maybe Int
  , value :: Prelude.Maybe Int
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapInt32Int32EntryR = Record TestAllTypesProto3_MapInt32Int32EntryRow
derive instance genericTestAllTypesProto3_MapInt32Int32Entry :: Prelude.Generic TestAllTypesProto3_MapInt32Int32Entry _
derive instance newtypeTestAllTypesProto3_MapInt32Int32Entry :: Prelude.Newtype TestAllTypesProto3_MapInt32Int32Entry _
derive instance eqTestAllTypesProto3_MapInt32Int32Entry :: Prelude.Eq TestAllTypesProto3_MapInt32Int32Entry
instance showTestAllTypesProto3_MapInt32Int32Entry :: Prelude.Show TestAllTypesProto3_MapInt32Int32Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapInt32Int32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapInt32Int32Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapInt32Int32Entry (TestAllTypesProto3_MapInt32Int32Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeInt32Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapInt32Int32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapInt32Int32Entry
parseTestAllTypesProto3_MapInt32Int32Entry length = Prelude.label "MapInt32Int32Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapInt32Int32Entry defaultTestAllTypesProto3_MapInt32Int32Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapInt32Int32EntryR TestAllTypesProto3_MapInt32Int32EntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapInt32Int32Entry :: TestAllTypesProto3_MapInt32Int32EntryR
defaultTestAllTypesProto3_MapInt32Int32Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapInt32Int32Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapInt32Int32EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapInt32Int32EntryRow => Record r1 -> TestAllTypesProto3_MapInt32Int32Entry
mkTestAllTypesProto3_MapInt32Int32Entry r = TestAllTypesProto3_MapInt32Int32Entry $ Prelude.merge r defaultTestAllTypesProto3_MapInt32Int32Entry

mergeTestAllTypesProto3_MapInt32Int32Entry :: TestAllTypesProto3_MapInt32Int32Entry -> TestAllTypesProto3_MapInt32Int32Entry -> TestAllTypesProto3_MapInt32Int32Entry
mergeTestAllTypesProto3_MapInt32Int32Entry (TestAllTypesProto3_MapInt32Int32Entry l) (TestAllTypesProto3_MapInt32Int32Entry r) = TestAllTypesProto3_MapInt32Int32Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapInt64Int64Entry`
newtype TestAllTypesProto3_MapInt64Int64Entry = TestAllTypesProto3_MapInt64Int64Entry TestAllTypesProto3_MapInt64Int64EntryR
type TestAllTypesProto3_MapInt64Int64EntryRow =
  ( key :: Prelude.Maybe Prelude.Int64
  , value :: Prelude.Maybe Prelude.Int64
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapInt64Int64EntryR = Record TestAllTypesProto3_MapInt64Int64EntryRow
derive instance genericTestAllTypesProto3_MapInt64Int64Entry :: Prelude.Generic TestAllTypesProto3_MapInt64Int64Entry _
derive instance newtypeTestAllTypesProto3_MapInt64Int64Entry :: Prelude.Newtype TestAllTypesProto3_MapInt64Int64Entry _
derive instance eqTestAllTypesProto3_MapInt64Int64Entry :: Prelude.Eq TestAllTypesProto3_MapInt64Int64Entry
instance showTestAllTypesProto3_MapInt64Int64Entry :: Prelude.Show TestAllTypesProto3_MapInt64Int64Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapInt64Int64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapInt64Int64Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapInt64Int64Entry (TestAllTypesProto3_MapInt64Int64Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeInt64Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeInt64Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapInt64Int64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapInt64Int64Entry
parseTestAllTypesProto3_MapInt64Int64Entry length = Prelude.label "MapInt64Int64Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapInt64Int64Entry defaultTestAllTypesProto3_MapInt64Int64Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapInt64Int64EntryR TestAllTypesProto3_MapInt64Int64EntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.decodeInt64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapInt64Int64Entry :: TestAllTypesProto3_MapInt64Int64EntryR
defaultTestAllTypesProto3_MapInt64Int64Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapInt64Int64Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapInt64Int64EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapInt64Int64EntryRow => Record r1 -> TestAllTypesProto3_MapInt64Int64Entry
mkTestAllTypesProto3_MapInt64Int64Entry r = TestAllTypesProto3_MapInt64Int64Entry $ Prelude.merge r defaultTestAllTypesProto3_MapInt64Int64Entry

mergeTestAllTypesProto3_MapInt64Int64Entry :: TestAllTypesProto3_MapInt64Int64Entry -> TestAllTypesProto3_MapInt64Int64Entry -> TestAllTypesProto3_MapInt64Int64Entry
mergeTestAllTypesProto3_MapInt64Int64Entry (TestAllTypesProto3_MapInt64Int64Entry l) (TestAllTypesProto3_MapInt64Int64Entry r) = TestAllTypesProto3_MapInt64Int64Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapUint32Uint32Entry`
newtype TestAllTypesProto3_MapUint32Uint32Entry = TestAllTypesProto3_MapUint32Uint32Entry TestAllTypesProto3_MapUint32Uint32EntryR
type TestAllTypesProto3_MapUint32Uint32EntryRow =
  ( key :: Prelude.Maybe Prelude.UInt
  , value :: Prelude.Maybe Prelude.UInt
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapUint32Uint32EntryR = Record TestAllTypesProto3_MapUint32Uint32EntryRow
derive instance genericTestAllTypesProto3_MapUint32Uint32Entry :: Prelude.Generic TestAllTypesProto3_MapUint32Uint32Entry _
derive instance newtypeTestAllTypesProto3_MapUint32Uint32Entry :: Prelude.Newtype TestAllTypesProto3_MapUint32Uint32Entry _
derive instance eqTestAllTypesProto3_MapUint32Uint32Entry :: Prelude.Eq TestAllTypesProto3_MapUint32Uint32Entry
instance showTestAllTypesProto3_MapUint32Uint32Entry :: Prelude.Show TestAllTypesProto3_MapUint32Uint32Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapUint32Uint32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapUint32Uint32Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapUint32Uint32Entry (TestAllTypesProto3_MapUint32Uint32Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeUint32Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeUint32Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapUint32Uint32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapUint32Uint32Entry
parseTestAllTypesProto3_MapUint32Uint32Entry length = Prelude.label "MapUint32Uint32Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapUint32Uint32Entry defaultTestAllTypesProto3_MapUint32Uint32Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapUint32Uint32EntryR TestAllTypesProto3_MapUint32Uint32EntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.decodeUint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapUint32Uint32Entry :: TestAllTypesProto3_MapUint32Uint32EntryR
defaultTestAllTypesProto3_MapUint32Uint32Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapUint32Uint32Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapUint32Uint32EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapUint32Uint32EntryRow => Record r1 -> TestAllTypesProto3_MapUint32Uint32Entry
mkTestAllTypesProto3_MapUint32Uint32Entry r = TestAllTypesProto3_MapUint32Uint32Entry $ Prelude.merge r defaultTestAllTypesProto3_MapUint32Uint32Entry

mergeTestAllTypesProto3_MapUint32Uint32Entry :: TestAllTypesProto3_MapUint32Uint32Entry -> TestAllTypesProto3_MapUint32Uint32Entry -> TestAllTypesProto3_MapUint32Uint32Entry
mergeTestAllTypesProto3_MapUint32Uint32Entry (TestAllTypesProto3_MapUint32Uint32Entry l) (TestAllTypesProto3_MapUint32Uint32Entry r) = TestAllTypesProto3_MapUint32Uint32Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapUint64Uint64Entry`
newtype TestAllTypesProto3_MapUint64Uint64Entry = TestAllTypesProto3_MapUint64Uint64Entry TestAllTypesProto3_MapUint64Uint64EntryR
type TestAllTypesProto3_MapUint64Uint64EntryRow =
  ( key :: Prelude.Maybe Prelude.UInt64
  , value :: Prelude.Maybe Prelude.UInt64
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapUint64Uint64EntryR = Record TestAllTypesProto3_MapUint64Uint64EntryRow
derive instance genericTestAllTypesProto3_MapUint64Uint64Entry :: Prelude.Generic TestAllTypesProto3_MapUint64Uint64Entry _
derive instance newtypeTestAllTypesProto3_MapUint64Uint64Entry :: Prelude.Newtype TestAllTypesProto3_MapUint64Uint64Entry _
derive instance eqTestAllTypesProto3_MapUint64Uint64Entry :: Prelude.Eq TestAllTypesProto3_MapUint64Uint64Entry
instance showTestAllTypesProto3_MapUint64Uint64Entry :: Prelude.Show TestAllTypesProto3_MapUint64Uint64Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapUint64Uint64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapUint64Uint64Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapUint64Uint64Entry (TestAllTypesProto3_MapUint64Uint64Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeUint64Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeUint64Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapUint64Uint64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapUint64Uint64Entry
parseTestAllTypesProto3_MapUint64Uint64Entry length = Prelude.label "MapUint64Uint64Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapUint64Uint64Entry defaultTestAllTypesProto3_MapUint64Uint64Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapUint64Uint64EntryR TestAllTypesProto3_MapUint64Uint64EntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.decodeUint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapUint64Uint64Entry :: TestAllTypesProto3_MapUint64Uint64EntryR
defaultTestAllTypesProto3_MapUint64Uint64Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapUint64Uint64Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapUint64Uint64EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapUint64Uint64EntryRow => Record r1 -> TestAllTypesProto3_MapUint64Uint64Entry
mkTestAllTypesProto3_MapUint64Uint64Entry r = TestAllTypesProto3_MapUint64Uint64Entry $ Prelude.merge r defaultTestAllTypesProto3_MapUint64Uint64Entry

mergeTestAllTypesProto3_MapUint64Uint64Entry :: TestAllTypesProto3_MapUint64Uint64Entry -> TestAllTypesProto3_MapUint64Uint64Entry -> TestAllTypesProto3_MapUint64Uint64Entry
mergeTestAllTypesProto3_MapUint64Uint64Entry (TestAllTypesProto3_MapUint64Uint64Entry l) (TestAllTypesProto3_MapUint64Uint64Entry r) = TestAllTypesProto3_MapUint64Uint64Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapSint32Sint32Entry`
newtype TestAllTypesProto3_MapSint32Sint32Entry = TestAllTypesProto3_MapSint32Sint32Entry TestAllTypesProto3_MapSint32Sint32EntryR
type TestAllTypesProto3_MapSint32Sint32EntryRow =
  ( key :: Prelude.Maybe Int
  , value :: Prelude.Maybe Int
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapSint32Sint32EntryR = Record TestAllTypesProto3_MapSint32Sint32EntryRow
derive instance genericTestAllTypesProto3_MapSint32Sint32Entry :: Prelude.Generic TestAllTypesProto3_MapSint32Sint32Entry _
derive instance newtypeTestAllTypesProto3_MapSint32Sint32Entry :: Prelude.Newtype TestAllTypesProto3_MapSint32Sint32Entry _
derive instance eqTestAllTypesProto3_MapSint32Sint32Entry :: Prelude.Eq TestAllTypesProto3_MapSint32Sint32Entry
instance showTestAllTypesProto3_MapSint32Sint32Entry :: Prelude.Show TestAllTypesProto3_MapSint32Sint32Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapSint32Sint32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapSint32Sint32Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapSint32Sint32Entry (TestAllTypesProto3_MapSint32Sint32Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeSint32Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeSint32Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapSint32Sint32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapSint32Sint32Entry
parseTestAllTypesProto3_MapSint32Sint32Entry length = Prelude.label "MapSint32Sint32Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapSint32Sint32Entry defaultTestAllTypesProto3_MapSint32Sint32Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapSint32Sint32EntryR TestAllTypesProto3_MapSint32Sint32EntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.decodeSint32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapSint32Sint32Entry :: TestAllTypesProto3_MapSint32Sint32EntryR
defaultTestAllTypesProto3_MapSint32Sint32Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapSint32Sint32Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapSint32Sint32EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapSint32Sint32EntryRow => Record r1 -> TestAllTypesProto3_MapSint32Sint32Entry
mkTestAllTypesProto3_MapSint32Sint32Entry r = TestAllTypesProto3_MapSint32Sint32Entry $ Prelude.merge r defaultTestAllTypesProto3_MapSint32Sint32Entry

mergeTestAllTypesProto3_MapSint32Sint32Entry :: TestAllTypesProto3_MapSint32Sint32Entry -> TestAllTypesProto3_MapSint32Sint32Entry -> TestAllTypesProto3_MapSint32Sint32Entry
mergeTestAllTypesProto3_MapSint32Sint32Entry (TestAllTypesProto3_MapSint32Sint32Entry l) (TestAllTypesProto3_MapSint32Sint32Entry r) = TestAllTypesProto3_MapSint32Sint32Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapSint64Sint64Entry`
newtype TestAllTypesProto3_MapSint64Sint64Entry = TestAllTypesProto3_MapSint64Sint64Entry TestAllTypesProto3_MapSint64Sint64EntryR
type TestAllTypesProto3_MapSint64Sint64EntryRow =
  ( key :: Prelude.Maybe Prelude.Int64
  , value :: Prelude.Maybe Prelude.Int64
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapSint64Sint64EntryR = Record TestAllTypesProto3_MapSint64Sint64EntryRow
derive instance genericTestAllTypesProto3_MapSint64Sint64Entry :: Prelude.Generic TestAllTypesProto3_MapSint64Sint64Entry _
derive instance newtypeTestAllTypesProto3_MapSint64Sint64Entry :: Prelude.Newtype TestAllTypesProto3_MapSint64Sint64Entry _
derive instance eqTestAllTypesProto3_MapSint64Sint64Entry :: Prelude.Eq TestAllTypesProto3_MapSint64Sint64Entry
instance showTestAllTypesProto3_MapSint64Sint64Entry :: Prelude.Show TestAllTypesProto3_MapSint64Sint64Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapSint64Sint64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapSint64Sint64Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapSint64Sint64Entry (TestAllTypesProto3_MapSint64Sint64Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeSint64Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeSint64Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapSint64Sint64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapSint64Sint64Entry
parseTestAllTypesProto3_MapSint64Sint64Entry length = Prelude.label "MapSint64Sint64Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapSint64Sint64Entry defaultTestAllTypesProto3_MapSint64Sint64Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapSint64Sint64EntryR TestAllTypesProto3_MapSint64Sint64EntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.decodeSint64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapSint64Sint64Entry :: TestAllTypesProto3_MapSint64Sint64EntryR
defaultTestAllTypesProto3_MapSint64Sint64Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapSint64Sint64Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapSint64Sint64EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapSint64Sint64EntryRow => Record r1 -> TestAllTypesProto3_MapSint64Sint64Entry
mkTestAllTypesProto3_MapSint64Sint64Entry r = TestAllTypesProto3_MapSint64Sint64Entry $ Prelude.merge r defaultTestAllTypesProto3_MapSint64Sint64Entry

mergeTestAllTypesProto3_MapSint64Sint64Entry :: TestAllTypesProto3_MapSint64Sint64Entry -> TestAllTypesProto3_MapSint64Sint64Entry -> TestAllTypesProto3_MapSint64Sint64Entry
mergeTestAllTypesProto3_MapSint64Sint64Entry (TestAllTypesProto3_MapSint64Sint64Entry l) (TestAllTypesProto3_MapSint64Sint64Entry r) = TestAllTypesProto3_MapSint64Sint64Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapFixed32Fixed32Entry`
newtype TestAllTypesProto3_MapFixed32Fixed32Entry = TestAllTypesProto3_MapFixed32Fixed32Entry TestAllTypesProto3_MapFixed32Fixed32EntryR
type TestAllTypesProto3_MapFixed32Fixed32EntryRow =
  ( key :: Prelude.Maybe Prelude.UInt
  , value :: Prelude.Maybe Prelude.UInt
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapFixed32Fixed32EntryR = Record TestAllTypesProto3_MapFixed32Fixed32EntryRow
derive instance genericTestAllTypesProto3_MapFixed32Fixed32Entry :: Prelude.Generic TestAllTypesProto3_MapFixed32Fixed32Entry _
derive instance newtypeTestAllTypesProto3_MapFixed32Fixed32Entry :: Prelude.Newtype TestAllTypesProto3_MapFixed32Fixed32Entry _
derive instance eqTestAllTypesProto3_MapFixed32Fixed32Entry :: Prelude.Eq TestAllTypesProto3_MapFixed32Fixed32Entry
instance showTestAllTypesProto3_MapFixed32Fixed32Entry :: Prelude.Show TestAllTypesProto3_MapFixed32Fixed32Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapFixed32Fixed32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapFixed32Fixed32Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapFixed32Fixed32Entry (TestAllTypesProto3_MapFixed32Fixed32Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeFixed32Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeFixed32Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapFixed32Fixed32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapFixed32Fixed32Entry
parseTestAllTypesProto3_MapFixed32Fixed32Entry length = Prelude.label "MapFixed32Fixed32Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapFixed32Fixed32Entry defaultTestAllTypesProto3_MapFixed32Fixed32Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapFixed32Fixed32EntryR TestAllTypesProto3_MapFixed32Fixed32EntryR)
  parseField 1 Prelude.Bits32 = Prelude.label "key / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.Bits32 = Prelude.label "value / " $ do
    x <- Prelude.decodeFixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapFixed32Fixed32Entry :: TestAllTypesProto3_MapFixed32Fixed32EntryR
defaultTestAllTypesProto3_MapFixed32Fixed32Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapFixed32Fixed32Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapFixed32Fixed32EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapFixed32Fixed32EntryRow => Record r1 -> TestAllTypesProto3_MapFixed32Fixed32Entry
mkTestAllTypesProto3_MapFixed32Fixed32Entry r = TestAllTypesProto3_MapFixed32Fixed32Entry $ Prelude.merge r defaultTestAllTypesProto3_MapFixed32Fixed32Entry

mergeTestAllTypesProto3_MapFixed32Fixed32Entry :: TestAllTypesProto3_MapFixed32Fixed32Entry -> TestAllTypesProto3_MapFixed32Fixed32Entry -> TestAllTypesProto3_MapFixed32Fixed32Entry
mergeTestAllTypesProto3_MapFixed32Fixed32Entry (TestAllTypesProto3_MapFixed32Fixed32Entry l) (TestAllTypesProto3_MapFixed32Fixed32Entry r) = TestAllTypesProto3_MapFixed32Fixed32Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapFixed64Fixed64Entry`
newtype TestAllTypesProto3_MapFixed64Fixed64Entry = TestAllTypesProto3_MapFixed64Fixed64Entry TestAllTypesProto3_MapFixed64Fixed64EntryR
type TestAllTypesProto3_MapFixed64Fixed64EntryRow =
  ( key :: Prelude.Maybe Prelude.UInt64
  , value :: Prelude.Maybe Prelude.UInt64
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapFixed64Fixed64EntryR = Record TestAllTypesProto3_MapFixed64Fixed64EntryRow
derive instance genericTestAllTypesProto3_MapFixed64Fixed64Entry :: Prelude.Generic TestAllTypesProto3_MapFixed64Fixed64Entry _
derive instance newtypeTestAllTypesProto3_MapFixed64Fixed64Entry :: Prelude.Newtype TestAllTypesProto3_MapFixed64Fixed64Entry _
derive instance eqTestAllTypesProto3_MapFixed64Fixed64Entry :: Prelude.Eq TestAllTypesProto3_MapFixed64Fixed64Entry
instance showTestAllTypesProto3_MapFixed64Fixed64Entry :: Prelude.Show TestAllTypesProto3_MapFixed64Fixed64Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapFixed64Fixed64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapFixed64Fixed64Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapFixed64Fixed64Entry (TestAllTypesProto3_MapFixed64Fixed64Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeFixed64Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeFixed64Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapFixed64Fixed64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapFixed64Fixed64Entry
parseTestAllTypesProto3_MapFixed64Fixed64Entry length = Prelude.label "MapFixed64Fixed64Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapFixed64Fixed64Entry defaultTestAllTypesProto3_MapFixed64Fixed64Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapFixed64Fixed64EntryR TestAllTypesProto3_MapFixed64Fixed64EntryR)
  parseField 1 Prelude.Bits64 = Prelude.label "key / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.Bits64 = Prelude.label "value / " $ do
    x <- Prelude.decodeFixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapFixed64Fixed64Entry :: TestAllTypesProto3_MapFixed64Fixed64EntryR
defaultTestAllTypesProto3_MapFixed64Fixed64Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapFixed64Fixed64Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapFixed64Fixed64EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapFixed64Fixed64EntryRow => Record r1 -> TestAllTypesProto3_MapFixed64Fixed64Entry
mkTestAllTypesProto3_MapFixed64Fixed64Entry r = TestAllTypesProto3_MapFixed64Fixed64Entry $ Prelude.merge r defaultTestAllTypesProto3_MapFixed64Fixed64Entry

mergeTestAllTypesProto3_MapFixed64Fixed64Entry :: TestAllTypesProto3_MapFixed64Fixed64Entry -> TestAllTypesProto3_MapFixed64Fixed64Entry -> TestAllTypesProto3_MapFixed64Fixed64Entry
mergeTestAllTypesProto3_MapFixed64Fixed64Entry (TestAllTypesProto3_MapFixed64Fixed64Entry l) (TestAllTypesProto3_MapFixed64Fixed64Entry r) = TestAllTypesProto3_MapFixed64Fixed64Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapSfixed32Sfixed32Entry`
newtype TestAllTypesProto3_MapSfixed32Sfixed32Entry = TestAllTypesProto3_MapSfixed32Sfixed32Entry TestAllTypesProto3_MapSfixed32Sfixed32EntryR
type TestAllTypesProto3_MapSfixed32Sfixed32EntryRow =
  ( key :: Prelude.Maybe Int
  , value :: Prelude.Maybe Int
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapSfixed32Sfixed32EntryR = Record TestAllTypesProto3_MapSfixed32Sfixed32EntryRow
derive instance genericTestAllTypesProto3_MapSfixed32Sfixed32Entry :: Prelude.Generic TestAllTypesProto3_MapSfixed32Sfixed32Entry _
derive instance newtypeTestAllTypesProto3_MapSfixed32Sfixed32Entry :: Prelude.Newtype TestAllTypesProto3_MapSfixed32Sfixed32Entry _
derive instance eqTestAllTypesProto3_MapSfixed32Sfixed32Entry :: Prelude.Eq TestAllTypesProto3_MapSfixed32Sfixed32Entry
instance showTestAllTypesProto3_MapSfixed32Sfixed32Entry :: Prelude.Show TestAllTypesProto3_MapSfixed32Sfixed32Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapSfixed32Sfixed32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapSfixed32Sfixed32Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapSfixed32Sfixed32Entry (TestAllTypesProto3_MapSfixed32Sfixed32Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeSfixed32Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeSfixed32Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapSfixed32Sfixed32Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapSfixed32Sfixed32Entry
parseTestAllTypesProto3_MapSfixed32Sfixed32Entry length = Prelude.label "MapSfixed32Sfixed32Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapSfixed32Sfixed32Entry defaultTestAllTypesProto3_MapSfixed32Sfixed32Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapSfixed32Sfixed32EntryR TestAllTypesProto3_MapSfixed32Sfixed32EntryR)
  parseField 1 Prelude.Bits32 = Prelude.label "key / " $ do
    x <- Prelude.decodeSfixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.Bits32 = Prelude.label "value / " $ do
    x <- Prelude.decodeSfixed32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapSfixed32Sfixed32Entry :: TestAllTypesProto3_MapSfixed32Sfixed32EntryR
defaultTestAllTypesProto3_MapSfixed32Sfixed32Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapSfixed32Sfixed32Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapSfixed32Sfixed32EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapSfixed32Sfixed32EntryRow => Record r1 -> TestAllTypesProto3_MapSfixed32Sfixed32Entry
mkTestAllTypesProto3_MapSfixed32Sfixed32Entry r = TestAllTypesProto3_MapSfixed32Sfixed32Entry $ Prelude.merge r defaultTestAllTypesProto3_MapSfixed32Sfixed32Entry

mergeTestAllTypesProto3_MapSfixed32Sfixed32Entry :: TestAllTypesProto3_MapSfixed32Sfixed32Entry -> TestAllTypesProto3_MapSfixed32Sfixed32Entry -> TestAllTypesProto3_MapSfixed32Sfixed32Entry
mergeTestAllTypesProto3_MapSfixed32Sfixed32Entry (TestAllTypesProto3_MapSfixed32Sfixed32Entry l) (TestAllTypesProto3_MapSfixed32Sfixed32Entry r) = TestAllTypesProto3_MapSfixed32Sfixed32Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapSfixed64Sfixed64Entry`
newtype TestAllTypesProto3_MapSfixed64Sfixed64Entry = TestAllTypesProto3_MapSfixed64Sfixed64Entry TestAllTypesProto3_MapSfixed64Sfixed64EntryR
type TestAllTypesProto3_MapSfixed64Sfixed64EntryRow =
  ( key :: Prelude.Maybe Prelude.Int64
  , value :: Prelude.Maybe Prelude.Int64
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapSfixed64Sfixed64EntryR = Record TestAllTypesProto3_MapSfixed64Sfixed64EntryRow
derive instance genericTestAllTypesProto3_MapSfixed64Sfixed64Entry :: Prelude.Generic TestAllTypesProto3_MapSfixed64Sfixed64Entry _
derive instance newtypeTestAllTypesProto3_MapSfixed64Sfixed64Entry :: Prelude.Newtype TestAllTypesProto3_MapSfixed64Sfixed64Entry _
derive instance eqTestAllTypesProto3_MapSfixed64Sfixed64Entry :: Prelude.Eq TestAllTypesProto3_MapSfixed64Sfixed64Entry
instance showTestAllTypesProto3_MapSfixed64Sfixed64Entry :: Prelude.Show TestAllTypesProto3_MapSfixed64Sfixed64Entry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapSfixed64Sfixed64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapSfixed64Sfixed64Entry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapSfixed64Sfixed64Entry (TestAllTypesProto3_MapSfixed64Sfixed64Entry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeSfixed64Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeSfixed64Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapSfixed64Sfixed64Entry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapSfixed64Sfixed64Entry
parseTestAllTypesProto3_MapSfixed64Sfixed64Entry length = Prelude.label "MapSfixed64Sfixed64Entry / " $
  Prelude.parseMessage TestAllTypesProto3_MapSfixed64Sfixed64Entry defaultTestAllTypesProto3_MapSfixed64Sfixed64Entry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapSfixed64Sfixed64EntryR TestAllTypesProto3_MapSfixed64Sfixed64EntryR)
  parseField 1 Prelude.Bits64 = Prelude.label "key / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.Bits64 = Prelude.label "value / " $ do
    x <- Prelude.decodeSfixed64
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapSfixed64Sfixed64Entry :: TestAllTypesProto3_MapSfixed64Sfixed64EntryR
defaultTestAllTypesProto3_MapSfixed64Sfixed64Entry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapSfixed64Sfixed64Entry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapSfixed64Sfixed64EntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapSfixed64Sfixed64EntryRow => Record r1 -> TestAllTypesProto3_MapSfixed64Sfixed64Entry
mkTestAllTypesProto3_MapSfixed64Sfixed64Entry r = TestAllTypesProto3_MapSfixed64Sfixed64Entry $ Prelude.merge r defaultTestAllTypesProto3_MapSfixed64Sfixed64Entry

mergeTestAllTypesProto3_MapSfixed64Sfixed64Entry :: TestAllTypesProto3_MapSfixed64Sfixed64Entry -> TestAllTypesProto3_MapSfixed64Sfixed64Entry -> TestAllTypesProto3_MapSfixed64Sfixed64Entry
mergeTestAllTypesProto3_MapSfixed64Sfixed64Entry (TestAllTypesProto3_MapSfixed64Sfixed64Entry l) (TestAllTypesProto3_MapSfixed64Sfixed64Entry r) = TestAllTypesProto3_MapSfixed64Sfixed64Entry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapInt32FloatEntry`
newtype TestAllTypesProto3_MapInt32FloatEntry = TestAllTypesProto3_MapInt32FloatEntry TestAllTypesProto3_MapInt32FloatEntryR
type TestAllTypesProto3_MapInt32FloatEntryRow =
  ( key :: Prelude.Maybe Int
  , value :: Prelude.Maybe Prelude.Float32
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapInt32FloatEntryR = Record TestAllTypesProto3_MapInt32FloatEntryRow
derive instance genericTestAllTypesProto3_MapInt32FloatEntry :: Prelude.Generic TestAllTypesProto3_MapInt32FloatEntry _
derive instance newtypeTestAllTypesProto3_MapInt32FloatEntry :: Prelude.Newtype TestAllTypesProto3_MapInt32FloatEntry _
derive instance eqTestAllTypesProto3_MapInt32FloatEntry :: Prelude.Eq TestAllTypesProto3_MapInt32FloatEntry
instance showTestAllTypesProto3_MapInt32FloatEntry :: Prelude.Show TestAllTypesProto3_MapInt32FloatEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapInt32FloatEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapInt32FloatEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapInt32FloatEntry (TestAllTypesProto3_MapInt32FloatEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeFloatField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapInt32FloatEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapInt32FloatEntry
parseTestAllTypesProto3_MapInt32FloatEntry length = Prelude.label "MapInt32FloatEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapInt32FloatEntry defaultTestAllTypesProto3_MapInt32FloatEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapInt32FloatEntryR TestAllTypesProto3_MapInt32FloatEntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.Bits32 = Prelude.label "value / " $ do
    x <- Prelude.decodeFloat
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapInt32FloatEntry :: TestAllTypesProto3_MapInt32FloatEntryR
defaultTestAllTypesProto3_MapInt32FloatEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapInt32FloatEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapInt32FloatEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapInt32FloatEntryRow => Record r1 -> TestAllTypesProto3_MapInt32FloatEntry
mkTestAllTypesProto3_MapInt32FloatEntry r = TestAllTypesProto3_MapInt32FloatEntry $ Prelude.merge r defaultTestAllTypesProto3_MapInt32FloatEntry

mergeTestAllTypesProto3_MapInt32FloatEntry :: TestAllTypesProto3_MapInt32FloatEntry -> TestAllTypesProto3_MapInt32FloatEntry -> TestAllTypesProto3_MapInt32FloatEntry
mergeTestAllTypesProto3_MapInt32FloatEntry (TestAllTypesProto3_MapInt32FloatEntry l) (TestAllTypesProto3_MapInt32FloatEntry r) = TestAllTypesProto3_MapInt32FloatEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapInt32DoubleEntry`
newtype TestAllTypesProto3_MapInt32DoubleEntry = TestAllTypesProto3_MapInt32DoubleEntry TestAllTypesProto3_MapInt32DoubleEntryR
type TestAllTypesProto3_MapInt32DoubleEntryRow =
  ( key :: Prelude.Maybe Int
  , value :: Prelude.Maybe Number
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapInt32DoubleEntryR = Record TestAllTypesProto3_MapInt32DoubleEntryRow
derive instance genericTestAllTypesProto3_MapInt32DoubleEntry :: Prelude.Generic TestAllTypesProto3_MapInt32DoubleEntry _
derive instance newtypeTestAllTypesProto3_MapInt32DoubleEntry :: Prelude.Newtype TestAllTypesProto3_MapInt32DoubleEntry _
derive instance eqTestAllTypesProto3_MapInt32DoubleEntry :: Prelude.Eq TestAllTypesProto3_MapInt32DoubleEntry
instance showTestAllTypesProto3_MapInt32DoubleEntry :: Prelude.Show TestAllTypesProto3_MapInt32DoubleEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapInt32DoubleEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapInt32DoubleEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapInt32DoubleEntry (TestAllTypesProto3_MapInt32DoubleEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeInt32Field
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeDoubleField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapInt32DoubleEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapInt32DoubleEntry
parseTestAllTypesProto3_MapInt32DoubleEntry length = Prelude.label "MapInt32DoubleEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapInt32DoubleEntry defaultTestAllTypesProto3_MapInt32DoubleEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapInt32DoubleEntryR TestAllTypesProto3_MapInt32DoubleEntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.Bits64 = Prelude.label "value / " $ do
    x <- Prelude.decodeDouble
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapInt32DoubleEntry :: TestAllTypesProto3_MapInt32DoubleEntryR
defaultTestAllTypesProto3_MapInt32DoubleEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapInt32DoubleEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapInt32DoubleEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapInt32DoubleEntryRow => Record r1 -> TestAllTypesProto3_MapInt32DoubleEntry
mkTestAllTypesProto3_MapInt32DoubleEntry r = TestAllTypesProto3_MapInt32DoubleEntry $ Prelude.merge r defaultTestAllTypesProto3_MapInt32DoubleEntry

mergeTestAllTypesProto3_MapInt32DoubleEntry :: TestAllTypesProto3_MapInt32DoubleEntry -> TestAllTypesProto3_MapInt32DoubleEntry -> TestAllTypesProto3_MapInt32DoubleEntry
mergeTestAllTypesProto3_MapInt32DoubleEntry (TestAllTypesProto3_MapInt32DoubleEntry l) (TestAllTypesProto3_MapInt32DoubleEntry r) = TestAllTypesProto3_MapInt32DoubleEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapBoolBoolEntry`
newtype TestAllTypesProto3_MapBoolBoolEntry = TestAllTypesProto3_MapBoolBoolEntry TestAllTypesProto3_MapBoolBoolEntryR
type TestAllTypesProto3_MapBoolBoolEntryRow =
  ( key :: Prelude.Maybe Boolean
  , value :: Prelude.Maybe Boolean
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapBoolBoolEntryR = Record TestAllTypesProto3_MapBoolBoolEntryRow
derive instance genericTestAllTypesProto3_MapBoolBoolEntry :: Prelude.Generic TestAllTypesProto3_MapBoolBoolEntry _
derive instance newtypeTestAllTypesProto3_MapBoolBoolEntry :: Prelude.Newtype TestAllTypesProto3_MapBoolBoolEntry _
derive instance eqTestAllTypesProto3_MapBoolBoolEntry :: Prelude.Eq TestAllTypesProto3_MapBoolBoolEntry
instance showTestAllTypesProto3_MapBoolBoolEntry :: Prelude.Show TestAllTypesProto3_MapBoolBoolEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapBoolBoolEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapBoolBoolEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapBoolBoolEntry (TestAllTypesProto3_MapBoolBoolEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeBoolField
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeBoolField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapBoolBoolEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapBoolBoolEntry
parseTestAllTypesProto3_MapBoolBoolEntry length = Prelude.label "MapBoolBoolEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapBoolBoolEntry defaultTestAllTypesProto3_MapBoolBoolEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapBoolBoolEntryR TestAllTypesProto3_MapBoolBoolEntryR)
  parseField 1 Prelude.VarInt = Prelude.label "key / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.decodeBool
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapBoolBoolEntry :: TestAllTypesProto3_MapBoolBoolEntryR
defaultTestAllTypesProto3_MapBoolBoolEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapBoolBoolEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapBoolBoolEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapBoolBoolEntryRow => Record r1 -> TestAllTypesProto3_MapBoolBoolEntry
mkTestAllTypesProto3_MapBoolBoolEntry r = TestAllTypesProto3_MapBoolBoolEntry $ Prelude.merge r defaultTestAllTypesProto3_MapBoolBoolEntry

mergeTestAllTypesProto3_MapBoolBoolEntry :: TestAllTypesProto3_MapBoolBoolEntry -> TestAllTypesProto3_MapBoolBoolEntry -> TestAllTypesProto3_MapBoolBoolEntry
mergeTestAllTypesProto3_MapBoolBoolEntry (TestAllTypesProto3_MapBoolBoolEntry l) (TestAllTypesProto3_MapBoolBoolEntry r) = TestAllTypesProto3_MapBoolBoolEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapStringStringEntry`
newtype TestAllTypesProto3_MapStringStringEntry = TestAllTypesProto3_MapStringStringEntry TestAllTypesProto3_MapStringStringEntryR
type TestAllTypesProto3_MapStringStringEntryRow =
  ( key :: Prelude.Maybe String
  , value :: Prelude.Maybe String
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapStringStringEntryR = Record TestAllTypesProto3_MapStringStringEntryRow
derive instance genericTestAllTypesProto3_MapStringStringEntry :: Prelude.Generic TestAllTypesProto3_MapStringStringEntry _
derive instance newtypeTestAllTypesProto3_MapStringStringEntry :: Prelude.Newtype TestAllTypesProto3_MapStringStringEntry _
derive instance eqTestAllTypesProto3_MapStringStringEntry :: Prelude.Eq TestAllTypesProto3_MapStringStringEntry
instance showTestAllTypesProto3_MapStringStringEntry :: Prelude.Show TestAllTypesProto3_MapStringStringEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapStringStringEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapStringStringEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapStringStringEntry (TestAllTypesProto3_MapStringStringEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeStringField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapStringStringEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapStringStringEntry
parseTestAllTypesProto3_MapStringStringEntry length = Prelude.label "MapStringStringEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapStringStringEntry defaultTestAllTypesProto3_MapStringStringEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapStringStringEntryR TestAllTypesProto3_MapStringStringEntryR)
  parseField 1 Prelude.LenDel = Prelude.label "key / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.LenDel = Prelude.label "value / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapStringStringEntry :: TestAllTypesProto3_MapStringStringEntryR
defaultTestAllTypesProto3_MapStringStringEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapStringStringEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapStringStringEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapStringStringEntryRow => Record r1 -> TestAllTypesProto3_MapStringStringEntry
mkTestAllTypesProto3_MapStringStringEntry r = TestAllTypesProto3_MapStringStringEntry $ Prelude.merge r defaultTestAllTypesProto3_MapStringStringEntry

mergeTestAllTypesProto3_MapStringStringEntry :: TestAllTypesProto3_MapStringStringEntry -> TestAllTypesProto3_MapStringStringEntry -> TestAllTypesProto3_MapStringStringEntry
mergeTestAllTypesProto3_MapStringStringEntry (TestAllTypesProto3_MapStringStringEntry l) (TestAllTypesProto3_MapStringStringEntry r) = TestAllTypesProto3_MapStringStringEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapStringBytesEntry`
newtype TestAllTypesProto3_MapStringBytesEntry = TestAllTypesProto3_MapStringBytesEntry TestAllTypesProto3_MapStringBytesEntryR
type TestAllTypesProto3_MapStringBytesEntryRow =
  ( key :: Prelude.Maybe String
  , value :: Prelude.Maybe Prelude.Bytes
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapStringBytesEntryR = Record TestAllTypesProto3_MapStringBytesEntryRow
derive instance genericTestAllTypesProto3_MapStringBytesEntry :: Prelude.Generic TestAllTypesProto3_MapStringBytesEntry _
derive instance newtypeTestAllTypesProto3_MapStringBytesEntry :: Prelude.Newtype TestAllTypesProto3_MapStringBytesEntry _
derive instance eqTestAllTypesProto3_MapStringBytesEntry :: Prelude.Eq TestAllTypesProto3_MapStringBytesEntry
instance showTestAllTypesProto3_MapStringBytesEntry :: Prelude.Show TestAllTypesProto3_MapStringBytesEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapStringBytesEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapStringBytesEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapStringBytesEntry (TestAllTypesProto3_MapStringBytesEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.encodeBytesField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapStringBytesEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapStringBytesEntry
parseTestAllTypesProto3_MapStringBytesEntry length = Prelude.label "MapStringBytesEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapStringBytesEntry defaultTestAllTypesProto3_MapStringBytesEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapStringBytesEntryR TestAllTypesProto3_MapStringBytesEntryR)
  parseField 1 Prelude.LenDel = Prelude.label "key / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.LenDel = Prelude.label "value / " $ do
    x <- Prelude.decodeBytes
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapStringBytesEntry :: TestAllTypesProto3_MapStringBytesEntryR
defaultTestAllTypesProto3_MapStringBytesEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapStringBytesEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapStringBytesEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapStringBytesEntryRow => Record r1 -> TestAllTypesProto3_MapStringBytesEntry
mkTestAllTypesProto3_MapStringBytesEntry r = TestAllTypesProto3_MapStringBytesEntry $ Prelude.merge r defaultTestAllTypesProto3_MapStringBytesEntry

mergeTestAllTypesProto3_MapStringBytesEntry :: TestAllTypesProto3_MapStringBytesEntry -> TestAllTypesProto3_MapStringBytesEntry -> TestAllTypesProto3_MapStringBytesEntry
mergeTestAllTypesProto3_MapStringBytesEntry (TestAllTypesProto3_MapStringBytesEntry l) (TestAllTypesProto3_MapStringBytesEntry r) = TestAllTypesProto3_MapStringBytesEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapStringNestedMessageEntry`
newtype TestAllTypesProto3_MapStringNestedMessageEntry = TestAllTypesProto3_MapStringNestedMessageEntry TestAllTypesProto3_MapStringNestedMessageEntryR
type TestAllTypesProto3_MapStringNestedMessageEntryRow =
  ( key :: Prelude.Maybe String
  , value :: Prelude.Maybe TestAllTypesProto3_NestedMessage
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapStringNestedMessageEntryR = Record TestAllTypesProto3_MapStringNestedMessageEntryRow
derive instance genericTestAllTypesProto3_MapStringNestedMessageEntry :: Prelude.Generic TestAllTypesProto3_MapStringNestedMessageEntry _
derive instance newtypeTestAllTypesProto3_MapStringNestedMessageEntry :: Prelude.Newtype TestAllTypesProto3_MapStringNestedMessageEntry _
derive instance eqTestAllTypesProto3_MapStringNestedMessageEntry :: Prelude.Eq TestAllTypesProto3_MapStringNestedMessageEntry
instance showTestAllTypesProto3_MapStringNestedMessageEntry :: Prelude.Show TestAllTypesProto3_MapStringNestedMessageEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapStringNestedMessageEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapStringNestedMessageEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapStringNestedMessageEntry (TestAllTypesProto3_MapStringNestedMessageEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 2 r.value (\_ -> false) $ Prelude.putLenDel putTestAllTypesProto3_NestedMessage
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapStringNestedMessageEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapStringNestedMessageEntry
parseTestAllTypesProto3_MapStringNestedMessageEntry length = Prelude.label "MapStringNestedMessageEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapStringNestedMessageEntry defaultTestAllTypesProto3_MapStringNestedMessageEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapStringNestedMessageEntryR TestAllTypesProto3_MapStringNestedMessageEntryR)
  parseField 1 Prelude.LenDel = Prelude.label "key / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.LenDel = Prelude.label "value / " $ do
    x <- Prelude.parseLenDel parseTestAllTypesProto3_NestedMessage
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ Prelude.Just Prelude.<<< Prelude.maybe x (mergeTestAllTypesProto3_NestedMessage x)
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapStringNestedMessageEntry :: TestAllTypesProto3_MapStringNestedMessageEntryR
defaultTestAllTypesProto3_MapStringNestedMessageEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapStringNestedMessageEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapStringNestedMessageEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapStringNestedMessageEntryRow => Record r1 -> TestAllTypesProto3_MapStringNestedMessageEntry
mkTestAllTypesProto3_MapStringNestedMessageEntry r = TestAllTypesProto3_MapStringNestedMessageEntry $ Prelude.merge r defaultTestAllTypesProto3_MapStringNestedMessageEntry

mergeTestAllTypesProto3_MapStringNestedMessageEntry :: TestAllTypesProto3_MapStringNestedMessageEntry -> TestAllTypesProto3_MapStringNestedMessageEntry -> TestAllTypesProto3_MapStringNestedMessageEntry
mergeTestAllTypesProto3_MapStringNestedMessageEntry (TestAllTypesProto3_MapStringNestedMessageEntry l) (TestAllTypesProto3_MapStringNestedMessageEntry r) = TestAllTypesProto3_MapStringNestedMessageEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.mergeWith mergeTestAllTypesProto3_NestedMessage l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapStringForeignMessageEntry`
newtype TestAllTypesProto3_MapStringForeignMessageEntry = TestAllTypesProto3_MapStringForeignMessageEntry TestAllTypesProto3_MapStringForeignMessageEntryR
type TestAllTypesProto3_MapStringForeignMessageEntryRow =
  ( key :: Prelude.Maybe String
  , value :: Prelude.Maybe ForeignMessage
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapStringForeignMessageEntryR = Record TestAllTypesProto3_MapStringForeignMessageEntryRow
derive instance genericTestAllTypesProto3_MapStringForeignMessageEntry :: Prelude.Generic TestAllTypesProto3_MapStringForeignMessageEntry _
derive instance newtypeTestAllTypesProto3_MapStringForeignMessageEntry :: Prelude.Newtype TestAllTypesProto3_MapStringForeignMessageEntry _
derive instance eqTestAllTypesProto3_MapStringForeignMessageEntry :: Prelude.Eq TestAllTypesProto3_MapStringForeignMessageEntry
instance showTestAllTypesProto3_MapStringForeignMessageEntry :: Prelude.Show TestAllTypesProto3_MapStringForeignMessageEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapStringForeignMessageEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapStringForeignMessageEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapStringForeignMessageEntry (TestAllTypesProto3_MapStringForeignMessageEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 2 r.value (\_ -> false) $ Prelude.putLenDel putForeignMessage
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapStringForeignMessageEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapStringForeignMessageEntry
parseTestAllTypesProto3_MapStringForeignMessageEntry length = Prelude.label "MapStringForeignMessageEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapStringForeignMessageEntry defaultTestAllTypesProto3_MapStringForeignMessageEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapStringForeignMessageEntryR TestAllTypesProto3_MapStringForeignMessageEntryR)
  parseField 1 Prelude.LenDel = Prelude.label "key / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.LenDel = Prelude.label "value / " $ do
    x <- Prelude.parseLenDel parseForeignMessage
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ Prelude.Just Prelude.<<< Prelude.maybe x (mergeForeignMessage x)
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapStringForeignMessageEntry :: TestAllTypesProto3_MapStringForeignMessageEntryR
defaultTestAllTypesProto3_MapStringForeignMessageEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapStringForeignMessageEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapStringForeignMessageEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapStringForeignMessageEntryRow => Record r1 -> TestAllTypesProto3_MapStringForeignMessageEntry
mkTestAllTypesProto3_MapStringForeignMessageEntry r = TestAllTypesProto3_MapStringForeignMessageEntry $ Prelude.merge r defaultTestAllTypesProto3_MapStringForeignMessageEntry

mergeTestAllTypesProto3_MapStringForeignMessageEntry :: TestAllTypesProto3_MapStringForeignMessageEntry -> TestAllTypesProto3_MapStringForeignMessageEntry -> TestAllTypesProto3_MapStringForeignMessageEntry
mergeTestAllTypesProto3_MapStringForeignMessageEntry (TestAllTypesProto3_MapStringForeignMessageEntry l) (TestAllTypesProto3_MapStringForeignMessageEntry r) = TestAllTypesProto3_MapStringForeignMessageEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.mergeWith mergeForeignMessage l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapStringNestedEnumEntry`
newtype TestAllTypesProto3_MapStringNestedEnumEntry = TestAllTypesProto3_MapStringNestedEnumEntry TestAllTypesProto3_MapStringNestedEnumEntryR
type TestAllTypesProto3_MapStringNestedEnumEntryRow =
  ( key :: Prelude.Maybe String
  , value :: Prelude.Maybe TestAllTypesProto3_NestedEnum
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapStringNestedEnumEntryR = Record TestAllTypesProto3_MapStringNestedEnumEntryRow
derive instance genericTestAllTypesProto3_MapStringNestedEnumEntry :: Prelude.Generic TestAllTypesProto3_MapStringNestedEnumEntry _
derive instance newtypeTestAllTypesProto3_MapStringNestedEnumEntry :: Prelude.Newtype TestAllTypesProto3_MapStringNestedEnumEntry _
derive instance eqTestAllTypesProto3_MapStringNestedEnumEntry :: Prelude.Eq TestAllTypesProto3_MapStringNestedEnumEntry
instance showTestAllTypesProto3_MapStringNestedEnumEntry :: Prelude.Show TestAllTypesProto3_MapStringNestedEnumEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapStringNestedEnumEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapStringNestedEnumEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapStringNestedEnumEntry (TestAllTypesProto3_MapStringNestedEnumEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.putEnumField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapStringNestedEnumEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapStringNestedEnumEntry
parseTestAllTypesProto3_MapStringNestedEnumEntry length = Prelude.label "MapStringNestedEnumEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapStringNestedEnumEntry defaultTestAllTypesProto3_MapStringNestedEnumEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapStringNestedEnumEntryR TestAllTypesProto3_MapStringNestedEnumEntryR)
  parseField 1 Prelude.LenDel = Prelude.label "key / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapStringNestedEnumEntry :: TestAllTypesProto3_MapStringNestedEnumEntryR
defaultTestAllTypesProto3_MapStringNestedEnumEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapStringNestedEnumEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapStringNestedEnumEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapStringNestedEnumEntryRow => Record r1 -> TestAllTypesProto3_MapStringNestedEnumEntry
mkTestAllTypesProto3_MapStringNestedEnumEntry r = TestAllTypesProto3_MapStringNestedEnumEntry $ Prelude.merge r defaultTestAllTypesProto3_MapStringNestedEnumEntry

mergeTestAllTypesProto3_MapStringNestedEnumEntry :: TestAllTypesProto3_MapStringNestedEnumEntry -> TestAllTypesProto3_MapStringNestedEnumEntry -> TestAllTypesProto3_MapStringNestedEnumEntry
mergeTestAllTypesProto3_MapStringNestedEnumEntry (TestAllTypesProto3_MapStringNestedEnumEntry l) (TestAllTypesProto3_MapStringNestedEnumEntry r) = TestAllTypesProto3_MapStringNestedEnumEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.MapStringForeignEnumEntry`
newtype TestAllTypesProto3_MapStringForeignEnumEntry = TestAllTypesProto3_MapStringForeignEnumEntry TestAllTypesProto3_MapStringForeignEnumEntryR
type TestAllTypesProto3_MapStringForeignEnumEntryRow =
  ( key :: Prelude.Maybe String
  , value :: Prelude.Maybe ForeignEnum
  , __unknown_fields :: Array Prelude.UnknownField
  )
type TestAllTypesProto3_MapStringForeignEnumEntryR = Record TestAllTypesProto3_MapStringForeignEnumEntryRow
derive instance genericTestAllTypesProto3_MapStringForeignEnumEntry :: Prelude.Generic TestAllTypesProto3_MapStringForeignEnumEntry _
derive instance newtypeTestAllTypesProto3_MapStringForeignEnumEntry :: Prelude.Newtype TestAllTypesProto3_MapStringForeignEnumEntry _
derive instance eqTestAllTypesProto3_MapStringForeignEnumEntry :: Prelude.Eq TestAllTypesProto3_MapStringForeignEnumEntry
instance showTestAllTypesProto3_MapStringForeignEnumEntry :: Prelude.Show TestAllTypesProto3_MapStringForeignEnumEntry where show x = Prelude.genericShow x

putTestAllTypesProto3_MapStringForeignEnumEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => TestAllTypesProto3_MapStringForeignEnumEntry -> Prelude.PutM m Prelude.Unit
putTestAllTypesProto3_MapStringForeignEnumEntry (TestAllTypesProto3_MapStringForeignEnumEntry r) = do
  Prelude.putOptional 1 r.key Prelude.isDefault Prelude.encodeStringField
  Prelude.putOptional 2 r.value Prelude.isDefault Prelude.putEnumField
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseTestAllTypesProto3_MapStringForeignEnumEntry :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m TestAllTypesProto3_MapStringForeignEnumEntry
parseTestAllTypesProto3_MapStringForeignEnumEntry length = Prelude.label "MapStringForeignEnumEntry / " $
  Prelude.parseMessage TestAllTypesProto3_MapStringForeignEnumEntry defaultTestAllTypesProto3_MapStringForeignEnumEntry parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder TestAllTypesProto3_MapStringForeignEnumEntryR TestAllTypesProto3_MapStringForeignEnumEntryR)
  parseField 1 Prelude.LenDel = Prelude.label "key / " $ do
    x <- Prelude.decodeString
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "key") $ \_ -> Prelude.Just x
  parseField 2 Prelude.VarInt = Prelude.label "value / " $ do
    x <- Prelude.parseEnum
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "value") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultTestAllTypesProto3_MapStringForeignEnumEntry :: TestAllTypesProto3_MapStringForeignEnumEntryR
defaultTestAllTypesProto3_MapStringForeignEnumEntry =
  { key: Prelude.Nothing
  , value: Prelude.Nothing
  , __unknown_fields: []
  }

mkTestAllTypesProto3_MapStringForeignEnumEntry :: forall r1 r3. Prelude.Union r1 TestAllTypesProto3_MapStringForeignEnumEntryRow r3 => Prelude.Nub r3 TestAllTypesProto3_MapStringForeignEnumEntryRow => Record r1 -> TestAllTypesProto3_MapStringForeignEnumEntry
mkTestAllTypesProto3_MapStringForeignEnumEntry r = TestAllTypesProto3_MapStringForeignEnumEntry $ Prelude.merge r defaultTestAllTypesProto3_MapStringForeignEnumEntry

mergeTestAllTypesProto3_MapStringForeignEnumEntry :: TestAllTypesProto3_MapStringForeignEnumEntry -> TestAllTypesProto3_MapStringForeignEnumEntry -> TestAllTypesProto3_MapStringForeignEnumEntry
mergeTestAllTypesProto3_MapStringForeignEnumEntry (TestAllTypesProto3_MapStringForeignEnumEntry l) (TestAllTypesProto3_MapStringForeignEnumEntry r) = TestAllTypesProto3_MapStringForeignEnumEntry
  { key: Prelude.alt l.key r.key
  , value: Prelude.alt l.value r.value
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.ForeignMessage`
newtype ForeignMessage = ForeignMessage ForeignMessageR
type ForeignMessageRow =
  ( c :: Prelude.Maybe Int
  , __unknown_fields :: Array Prelude.UnknownField
  )
type ForeignMessageR = Record ForeignMessageRow
derive instance genericForeignMessage :: Prelude.Generic ForeignMessage _
derive instance newtypeForeignMessage :: Prelude.Newtype ForeignMessage _
derive instance eqForeignMessage :: Prelude.Eq ForeignMessage
instance showForeignMessage :: Prelude.Show ForeignMessage where show x = Prelude.genericShow x

putForeignMessage :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => ForeignMessage -> Prelude.PutM m Prelude.Unit
putForeignMessage (ForeignMessage r) = do
  Prelude.putOptional 1 r.c Prelude.isDefault Prelude.encodeInt32Field
  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseForeignMessage :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m ForeignMessage
parseForeignMessage length = Prelude.label "ForeignMessage / " $
  Prelude.parseMessage ForeignMessage defaultForeignMessage parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder ForeignMessageR ForeignMessageR)
  parseField 1 Prelude.VarInt = Prelude.label "c / " $ do
    x <- Prelude.decodeInt32
    pure $ Prelude.modify (Prelude.Proxy :: Prelude.Proxy "c") $ \_ -> Prelude.Just x
  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultForeignMessage :: ForeignMessageR
defaultForeignMessage =
  { c: Prelude.Nothing
  , __unknown_fields: []
  }

mkForeignMessage :: forall r1 r3. Prelude.Union r1 ForeignMessageRow r3 => Prelude.Nub r3 ForeignMessageRow => Record r1 -> ForeignMessage
mkForeignMessage r = ForeignMessage $ Prelude.merge r defaultForeignMessage

mergeForeignMessage :: ForeignMessage -> ForeignMessage -> ForeignMessage
mergeForeignMessage (ForeignMessage l) (ForeignMessage r) = ForeignMessage
  { c: Prelude.alt l.c r.c
  , __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.NullHypothesisProto3`
newtype NullHypothesisProto3 = NullHypothesisProto3 NullHypothesisProto3R
type NullHypothesisProto3Row =
  ( __unknown_fields :: Array Prelude.UnknownField
  )
type NullHypothesisProto3R = Record NullHypothesisProto3Row
derive instance genericNullHypothesisProto3 :: Prelude.Generic NullHypothesisProto3 _
derive instance newtypeNullHypothesisProto3 :: Prelude.Newtype NullHypothesisProto3 _
derive instance eqNullHypothesisProto3 :: Prelude.Eq NullHypothesisProto3
instance showNullHypothesisProto3 :: Prelude.Show NullHypothesisProto3 where show x = Prelude.genericShow x

putNullHypothesisProto3 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => NullHypothesisProto3 -> Prelude.PutM m Prelude.Unit
putNullHypothesisProto3 (NullHypothesisProto3 r) = do

  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseNullHypothesisProto3 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m NullHypothesisProto3
parseNullHypothesisProto3 length = Prelude.label "NullHypothesisProto3 / " $
  Prelude.parseMessage NullHypothesisProto3 defaultNullHypothesisProto3 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder NullHypothesisProto3R NullHypothesisProto3R)

  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultNullHypothesisProto3 :: NullHypothesisProto3R
defaultNullHypothesisProto3 =
  { __unknown_fields: []
  }

mkNullHypothesisProto3 :: forall r1 r3. Prelude.Union r1 NullHypothesisProto3Row r3 => Prelude.Nub r3 NullHypothesisProto3Row => Record r1 -> NullHypothesisProto3
mkNullHypothesisProto3 r = NullHypothesisProto3 $ Prelude.merge r defaultNullHypothesisProto3

mergeNullHypothesisProto3 :: NullHypothesisProto3 -> NullHypothesisProto3 -> NullHypothesisProto3
mergeNullHypothesisProto3 (NullHypothesisProto3 l) (NullHypothesisProto3 r) = NullHypothesisProto3
  { __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Message generated by __protobuf__ from `protobuf_test_messages.proto3.EnumOnlyProto3`
newtype EnumOnlyProto3 = EnumOnlyProto3 EnumOnlyProto3R
type EnumOnlyProto3Row =
  ( __unknown_fields :: Array Prelude.UnknownField
  )
type EnumOnlyProto3R = Record EnumOnlyProto3Row
derive instance genericEnumOnlyProto3 :: Prelude.Generic EnumOnlyProto3 _
derive instance newtypeEnumOnlyProto3 :: Prelude.Newtype EnumOnlyProto3 _
derive instance eqEnumOnlyProto3 :: Prelude.Eq EnumOnlyProto3
instance showEnumOnlyProto3 :: Prelude.Show EnumOnlyProto3 where show x = Prelude.genericShow x

putEnumOnlyProto3 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => EnumOnlyProto3 -> Prelude.PutM m Prelude.Unit
putEnumOnlyProto3 (EnumOnlyProto3 r) = do

  Prelude.foldRecM (\_ x -> Prelude.putFieldUnknown x) unit r.__unknown_fields

parseEnumOnlyProto3 :: forall m. Prelude.MonadEffect m => Prelude.MonadRec m => Prelude.ByteLength -> Prelude.ParserT Prelude.DataView m EnumOnlyProto3
parseEnumOnlyProto3 length = Prelude.label "EnumOnlyProto3 / " $
  Prelude.parseMessage EnumOnlyProto3 defaultEnumOnlyProto3 parseField length
 where
  parseField
    :: Prelude.FieldNumberInt
    -> Prelude.WireType
    -> Prelude.ParserT Prelude.DataView m (Prelude.Builder EnumOnlyProto3R EnumOnlyProto3R)

  parseField fieldNumber wireType = Prelude.parseFieldUnknown fieldNumber wireType

defaultEnumOnlyProto3 :: EnumOnlyProto3R
defaultEnumOnlyProto3 =
  { __unknown_fields: []
  }

mkEnumOnlyProto3 :: forall r1 r3. Prelude.Union r1 EnumOnlyProto3Row r3 => Prelude.Nub r3 EnumOnlyProto3Row => Record r1 -> EnumOnlyProto3
mkEnumOnlyProto3 r = EnumOnlyProto3 $ Prelude.merge r defaultEnumOnlyProto3

mergeEnumOnlyProto3 :: EnumOnlyProto3 -> EnumOnlyProto3 -> EnumOnlyProto3
mergeEnumOnlyProto3 (EnumOnlyProto3 l) (EnumOnlyProto3 r) = EnumOnlyProto3
  { __unknown_fields: r.__unknown_fields <> l.__unknown_fields
  }


-- | Enum generated by __protobuf__ from `protobuf_test_messages.proto3.ForeignEnum`
data ForeignEnum
  = ForeignEnum_FOREIGN_FOO
  | ForeignEnum_FOREIGN_BAR
  | ForeignEnum_FOREIGN_BAZ
derive instance genericForeignEnum :: Prelude.Generic ForeignEnum _
derive instance eqForeignEnum :: Prelude.Eq ForeignEnum
instance showForeignEnum :: Prelude.Show ForeignEnum where show = Prelude.genericShow
instance ordForeignEnum :: Prelude.Ord ForeignEnum where compare = Prelude.genericCompare
instance boundedForeignEnum :: Prelude.Bounded ForeignEnum
 where
  bottom = Prelude.genericBottom
  top = Prelude.genericTop
instance enumForeignEnum :: Prelude.Enum ForeignEnum
 where
  succ = Prelude.genericSucc
  pred = Prelude.genericPred
instance boundedenumForeignEnum :: Prelude.BoundedEnum ForeignEnum
 where
  cardinality = Prelude.genericCardinality
  toEnum (0) = Prelude.Just ForeignEnum_FOREIGN_FOO
  toEnum (1) = Prelude.Just ForeignEnum_FOREIGN_BAR
  toEnum (2) = Prelude.Just ForeignEnum_FOREIGN_BAZ
  toEnum _ = Prelude.Nothing
  fromEnum ForeignEnum_FOREIGN_FOO = (0)
  fromEnum ForeignEnum_FOREIGN_BAR = (1)
  fromEnum ForeignEnum_FOREIGN_BAZ = (2)
instance defaultForeignEnum :: Prelude.Default ForeignEnum
 where
  default = ForeignEnum_FOREIGN_FOO
  isDefault = eq ForeignEnum_FOREIGN_FOO

-- | Enum generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.NestedEnum`
data TestAllTypesProto3_NestedEnum
  = TestAllTypesProto3_NestedEnum_FOO
  | TestAllTypesProto3_NestedEnum_BAR
  | TestAllTypesProto3_NestedEnum_BAZ
  | TestAllTypesProto3_NestedEnum_NEG
derive instance genericTestAllTypesProto3_NestedEnum :: Prelude.Generic TestAllTypesProto3_NestedEnum _
derive instance eqTestAllTypesProto3_NestedEnum :: Prelude.Eq TestAllTypesProto3_NestedEnum
instance showTestAllTypesProto3_NestedEnum :: Prelude.Show TestAllTypesProto3_NestedEnum where show = Prelude.genericShow
instance ordTestAllTypesProto3_NestedEnum :: Prelude.Ord TestAllTypesProto3_NestedEnum where compare = Prelude.genericCompare
instance boundedTestAllTypesProto3_NestedEnum :: Prelude.Bounded TestAllTypesProto3_NestedEnum
 where
  bottom = Prelude.genericBottom
  top = Prelude.genericTop
instance enumTestAllTypesProto3_NestedEnum :: Prelude.Enum TestAllTypesProto3_NestedEnum
 where
  succ = Prelude.genericSucc
  pred = Prelude.genericPred
instance boundedenumTestAllTypesProto3_NestedEnum :: Prelude.BoundedEnum TestAllTypesProto3_NestedEnum
 where
  cardinality = Prelude.genericCardinality
  toEnum (0) = Prelude.Just TestAllTypesProto3_NestedEnum_FOO
  toEnum (1) = Prelude.Just TestAllTypesProto3_NestedEnum_BAR
  toEnum (2) = Prelude.Just TestAllTypesProto3_NestedEnum_BAZ
  toEnum (-1) = Prelude.Just TestAllTypesProto3_NestedEnum_NEG
  toEnum _ = Prelude.Nothing
  fromEnum TestAllTypesProto3_NestedEnum_FOO = (0)
  fromEnum TestAllTypesProto3_NestedEnum_BAR = (1)
  fromEnum TestAllTypesProto3_NestedEnum_BAZ = (2)
  fromEnum TestAllTypesProto3_NestedEnum_NEG = (-1)
instance defaultTestAllTypesProto3_NestedEnum :: Prelude.Default TestAllTypesProto3_NestedEnum
 where
  default = TestAllTypesProto3_NestedEnum_FOO
  isDefault = eq TestAllTypesProto3_NestedEnum_FOO

-- | Enum generated by __protobuf__ from `protobuf_test_messages.proto3.TestAllTypesProto3.AliasedEnum`
data TestAllTypesProto3_AliasedEnum
  = TestAllTypesProto3_AliasedEnum_ALIAS_FOO
  | TestAllTypesProto3_AliasedEnum_ALIAS_BAR
  | TestAllTypesProto3_AliasedEnum_ALIAS_BAZ
  | TestAllTypesProto3_AliasedEnum_MOO
  | TestAllTypesProto3_AliasedEnum_Moo
  | TestAllTypesProto3_AliasedEnum_BAz
derive instance genericTestAllTypesProto3_AliasedEnum :: Prelude.Generic TestAllTypesProto3_AliasedEnum _
derive instance eqTestAllTypesProto3_AliasedEnum :: Prelude.Eq TestAllTypesProto3_AliasedEnum
instance showTestAllTypesProto3_AliasedEnum :: Prelude.Show TestAllTypesProto3_AliasedEnum where show = Prelude.genericShow
instance ordTestAllTypesProto3_AliasedEnum :: Prelude.Ord TestAllTypesProto3_AliasedEnum where compare = Prelude.genericCompare
instance boundedTestAllTypesProto3_AliasedEnum :: Prelude.Bounded TestAllTypesProto3_AliasedEnum
 where
  bottom = Prelude.genericBottom
  top = Prelude.genericTop
instance enumTestAllTypesProto3_AliasedEnum :: Prelude.Enum TestAllTypesProto3_AliasedEnum
 where
  succ = Prelude.genericSucc
  pred = Prelude.genericPred
instance boundedenumTestAllTypesProto3_AliasedEnum :: Prelude.BoundedEnum TestAllTypesProto3_AliasedEnum
 where
  cardinality = Prelude.genericCardinality
  toEnum (0) = Prelude.Just TestAllTypesProto3_AliasedEnum_ALIAS_FOO
  toEnum (1) = Prelude.Just TestAllTypesProto3_AliasedEnum_ALIAS_BAR
  toEnum (2) = Prelude.Just TestAllTypesProto3_AliasedEnum_ALIAS_BAZ
  toEnum (2) = Prelude.Just TestAllTypesProto3_AliasedEnum_MOO
  toEnum (2) = Prelude.Just TestAllTypesProto3_AliasedEnum_Moo
  toEnum (2) = Prelude.Just TestAllTypesProto3_AliasedEnum_BAz
  toEnum _ = Prelude.Nothing
  fromEnum TestAllTypesProto3_AliasedEnum_ALIAS_FOO = (0)
  fromEnum TestAllTypesProto3_AliasedEnum_ALIAS_BAR = (1)
  fromEnum TestAllTypesProto3_AliasedEnum_ALIAS_BAZ = (2)
  fromEnum TestAllTypesProto3_AliasedEnum_MOO = (2)
  fromEnum TestAllTypesProto3_AliasedEnum_Moo = (2)
  fromEnum TestAllTypesProto3_AliasedEnum_BAz = (2)
instance defaultTestAllTypesProto3_AliasedEnum :: Prelude.Default TestAllTypesProto3_AliasedEnum
 where
  default = TestAllTypesProto3_AliasedEnum_ALIAS_FOO
  isDefault = eq TestAllTypesProto3_AliasedEnum_ALIAS_FOO

-- | Enum generated by __protobuf__ from `protobuf_test_messages.proto3.EnumOnlyProto3.Bool`
data EnumOnlyProto3_Bool
  = EnumOnlyProto3_Bool_KFalse
  | EnumOnlyProto3_Bool_KTrue
derive instance genericEnumOnlyProto3_Bool :: Prelude.Generic EnumOnlyProto3_Bool _
derive instance eqEnumOnlyProto3_Bool :: Prelude.Eq EnumOnlyProto3_Bool
instance showEnumOnlyProto3_Bool :: Prelude.Show EnumOnlyProto3_Bool where show = Prelude.genericShow
instance ordEnumOnlyProto3_Bool :: Prelude.Ord EnumOnlyProto3_Bool where compare = Prelude.genericCompare
instance boundedEnumOnlyProto3_Bool :: Prelude.Bounded EnumOnlyProto3_Bool
 where
  bottom = Prelude.genericBottom
  top = Prelude.genericTop
instance enumEnumOnlyProto3_Bool :: Prelude.Enum EnumOnlyProto3_Bool
 where
  succ = Prelude.genericSucc
  pred = Prelude.genericPred
instance boundedenumEnumOnlyProto3_Bool :: Prelude.BoundedEnum EnumOnlyProto3_Bool
 where
  cardinality = Prelude.genericCardinality
  toEnum (0) = Prelude.Just EnumOnlyProto3_Bool_KFalse
  toEnum (1) = Prelude.Just EnumOnlyProto3_Bool_KTrue
  toEnum _ = Prelude.Nothing
  fromEnum EnumOnlyProto3_Bool_KFalse = (0)
  fromEnum EnumOnlyProto3_Bool_KTrue = (1)
instance defaultEnumOnlyProto3_Bool :: Prelude.Default EnumOnlyProto3_Bool
 where
  default = EnumOnlyProto3_Bool_KFalse
  isDefault = eq EnumOnlyProto3_Bool_KFalse

